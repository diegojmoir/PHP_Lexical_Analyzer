/* The following code was generated by JFlex 1.6.1 */


package analizador_lexico;
/*you shoukd import your enum file with all the symbols */ 
import static analizador_lexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Diego PÃ©rez Moir/Desktop/U/Quinto Cinclo/Lenguajes Formales y Automatas/Analizador Lexico/src/analizador_lexico/PHP.flex</tt>
 */
class PHPLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\16\1\20\1\20\1\17\22\0\1\24\1\72\1\25"+
    "\1\22\1\51\1\74\1\75\1\27\1\102\1\57\1\15\1\71\1\101"+
    "\1\11\1\12\1\14\1\2\1\10\6\6\2\3\1\67\1\100\1\73"+
    "\1\56\1\70\1\55\1\106\1\33\1\7\1\31\1\36\1\13\1\5"+
    "\1\65\1\47\1\40\1\53\1\62\1\32\1\46\1\43\1\45\1\50"+
    "\1\66\1\41\1\35\1\44\1\42\1\64\1\63\1\4\1\60\1\53"+
    "\1\52\1\26\1\54\1\77\1\30\1\0\1\33\1\7\1\31\1\36"+
    "\1\13\1\5\1\65\1\47\1\40\1\53\1\62\1\32\1\46\1\43"+
    "\1\45\1\50\1\66\1\41\1\35\1\44\1\42\1\64\1\63\1\4"+
    "\1\60\1\53\1\103\1\76\1\104\1\105\6\1\1\21\172\1\60\0"+
    "\2\37\115\0\1\34\u1ea8\0\1\20\1\20\u0100\0\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\3\2\1\4\1\5\1\2"+
    "\1\6\1\7\2\10\1\11\1\12\1\13\1\14\4\2"+
    "\1\1\2\2\1\1\7\2\1\1\1\15\1\16\1\17"+
    "\1\20\1\21\3\2\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\0\1\42\1\0\1\2\1\0"+
    "\4\2\2\3\1\43\1\0\1\44\1\0\1\45\6\2"+
    "\1\0\1\46\1\47\1\50\1\0\1\51\1\0\1\51"+
    "\13\2\1\0\2\2\2\52\2\2\2\0\3\2\1\0"+
    "\1\2\1\53\1\54\3\0\1\54\4\2\1\0\6\2"+
    "\1\55\2\2\1\56\1\1\1\56\1\57\1\0\1\60"+
    "\1\61\1\0\4\2\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\0\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\2\3\1\42\1\0\1\100\1\0\2\2"+
    "\1\101\1\2\1\3\4\0\3\2\1\0\4\2\1\0"+
    "\1\1\1\102\1\0\4\2\1\0\1\2\1\0\7\2"+
    "\1\0\3\2\1\0\1\2\1\0\2\2\1\103\2\0"+
    "\4\2\2\104\5\0\7\2\2\105\1\0\1\2\1\106"+
    "\2\2\1\107\1\2\1\0\3\2\1\0\1\56\1\110"+
    "\1\1\2\0\1\2\1\56\2\2\1\111\1\112\1\0"+
    "\1\113\1\0\4\2\1\0\2\114\1\2\1\115\2\116"+
    "\1\2\1\0\2\2\1\0\3\2\1\117\1\11\3\0"+
    "\4\2\1\0\4\2\1\0\3\2\2\120\1\2\1\0"+
    "\2\2\2\121\1\0\2\2\2\0\4\2\5\0\7\2"+
    "\1\0\2\2\1\0\2\2\2\0\4\2\1\0\1\56"+
    "\1\0\2\2\1\122\1\0\2\123\2\2\2\124\1\2"+
    "\2\0\2\2\1\0\2\2\2\125\1\2\1\126\1\0"+
    "\1\11\2\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\2\127\1\130\1\2\1\131\2\132\1\0\1\2\1\0"+
    "\1\2\1\133\2\0\4\2\1\134\5\0\1\134\6\2"+
    "\1\0\1\2\2\135\1\0\1\2\2\136\1\137\1\140"+
    "\1\0\1\140\2\2\1\0\1\2\1\0\1\56\2\141"+
    "\1\2\1\142\1\0\3\2\2\143\1\144\1\0\2\2"+
    "\1\0\3\2\1\145\1\0\3\2\1\0\1\2\1\0"+
    "\1\2\1\146\1\147\1\146\1\147\2\2\5\0\5\2"+
    "\1\150\1\0\1\2\1\0\1\2\1\0\2\2\2\151"+
    "\1\0\1\56\1\152\1\0\1\2\1\153\2\154\1\2"+
    "\1\0\2\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\1\2\1\0\1\2\1\155\1\156\1\157\4\0"+
    "\1\157\4\2\2\160\1\0\1\2\2\161\1\2\1\162"+
    "\1\56\2\163\1\2\1\0\2\2\2\164\1\0\2\2"+
    "\1\0\1\2\1\165\2\166\2\167\5\0\5\2\1\0"+
    "\1\2\1\0\2\2\1\0\1\2\2\170\2\2\1\0"+
    "\1\171\1\0\1\172\1\0\1\2\1\171\1\2\1\172"+
    "\1\2\1\0\1\2\2\173\1\174\1\0\1\175\1\176"+
    "\1\2\1\0\1\177\1\200\1\2\1\177\1\200\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\2\201\2\202\1\0\1\2\1\0\1\2\2\203";

  private static int [] zzUnpackAction() {
    int [] result = new int[607];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\107\0\u039b\0\u03e2"+
    "\0\u0429\0\107\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\107\0\107\0\u08e0\0\u0927\0\u096e"+
    "\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d"+
    "\0\u10a4\0\107\0\u105d\0\107\0\u10eb\0\u1132\0\u1179\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\107\0\u12dc\0\107\0\u0429\0\107"+
    "\0\u1323\0\u0429\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\107\0\216\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af"+
    "\0\u18f6\0\u193d\0\u1984\0\216\0\107\0\u19cb\0\u1a12\0\u1a59"+
    "\0\216\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a"+
    "\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\216\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\107\0\u1f10\0\u1f57\0\u1f10\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\107\0\107\0\u2101\0\107\0\u105d"+
    "\0\u2148\0\u218f\0\107\0\u21d6\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\u0d09\0\u0d50\0\u221d\0\u221d\0\216\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u0d97\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d"+
    "\0\u26d4\0\u271b\0\u2762\0\107\0\u27a9\0\u27f0\0\u2837\0\u287e"+
    "\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6"+
    "\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\216\0\u2e51\0\u2e98\0\u2edf"+
    "\0\u2f26\0\u2f6d\0\u2fb4\0\107\0\216\0\u2ffb\0\u3042\0\u3089"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1"+
    "\0\u3308\0\107\0\216\0\u334f\0\u3396\0\216\0\u33dd\0\u3424"+
    "\0\216\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\107\0\u365c\0\u36a3\0\u36ea\0\u3731\0\216\0\u3778\0\u37bf"+
    "\0\107\0\107\0\u3806\0\107\0\u384d\0\u3894\0\u38db\0\u3922"+
    "\0\u3969\0\u39b0\0\107\0\216\0\u39f7\0\216\0\u3a3e\0\u3a85"+
    "\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd"+
    "\0\216\0\u3d04\0\u2762\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67"+
    "\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f"+
    "\0\u40e6\0\u412d\0\107\0\216\0\u4174\0\u41bb\0\u4202\0\u4249"+
    "\0\107\0\216\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3"+
    "\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b"+
    "\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b"+
    "\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3"+
    "\0\216\0\u4d1a\0\107\0\216\0\u4d61\0\u4da8\0\107\0\216"+
    "\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0"+
    "\0\107\0\216\0\u5027\0\216\0\u3d04\0\107\0\u506e\0\u50b5"+
    "\0\u50fc\0\u5143\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed"+
    "\0\107\0\216\0\216\0\u5334\0\216\0\107\0\216\0\u537b"+
    "\0\u53c2\0\u5409\0\u5450\0\216\0\u5497\0\u54de\0\u5525\0\u556c"+
    "\0\u55b3\0\u55fa\0\107\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d"+
    "\0\216\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e"+
    "\0\u5995\0\107\0\216\0\u59dc\0\u5a23\0\107\0\216\0\216"+
    "\0\107\0\u5a6a\0\216\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86\0\u5bcd"+
    "\0\u5c14\0\107\0\216\0\u5c5b\0\107\0\u5ca2\0\u5ce9\0\u5d30"+
    "\0\u5d77\0\107\0\216\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda"+
    "\0\u5f21\0\u5f68\0\u5faf\0\107\0\u5ff6\0\u603d\0\u6084\0\u60cb"+
    "\0\u6112\0\u6159\0\u61a0\0\u61e7\0\107\0\107\0\216\0\216"+
    "\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f"+
    "\0\u6466\0\u64ad\0\u64f4\0\u653b\0\216\0\u6582\0\u65c9\0\u6610"+
    "\0\u6657\0\u669e\0\u66e5\0\u672c\0\107\0\216\0\u6773\0\u67ba"+
    "\0\216\0\u6801\0\u6848\0\216\0\107\0\216\0\u688f\0\u68d6"+
    "\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e"+
    "\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8\0\216\0\216"+
    "\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0"+
    "\0\u6f37\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u709a\0\107\0\216"+
    "\0\u70e1\0\107\0\u7128\0\107\0\216\0\u716f\0\u71b6\0\u71fd"+
    "\0\u7244\0\107\0\216\0\u728b\0\u72d2\0\u7319\0\u7360\0\u73a7"+
    "\0\216\0\107\0\216\0\107\0\216\0\u73ee\0\u7435\0\u747c"+
    "\0\u74c3\0\u750a\0\u7551\0\u7598\0\u75df\0\u7626\0\u766d\0\u76b4"+
    "\0\u76fb\0\u7742\0\u7789\0\u77d0\0\u7817\0\u785e\0\107\0\216"+
    "\0\u78a5\0\u78ec\0\u7933\0\107\0\u797a\0\107\0\u79c1\0\u7a08"+
    "\0\216\0\u7a4f\0\216\0\u7a96\0\u7add\0\u7b24\0\107\0\216"+
    "\0\216\0\u7b6b\0\216\0\216\0\u7bb2\0\u7bf9\0\107\0\107"+
    "\0\u7c40\0\216\0\216\0\u7c87\0\u7cce\0\u7d15\0\u7d5c\0\u7da3"+
    "\0\u7dea\0\u7e31\0\u7e78\0\u7ebf\0\u7f06\0\107\0\216\0\107"+
    "\0\216\0\u7f4d\0\u7f94\0\u7fdb\0\u8022\0\107\0\216";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[607];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\5\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\0\1\3\1\20\2\16\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\3\1\42\1\43"+
    "\1\44\1\3\1\45\1\46\1\47\1\50\1\3\1\2"+
    "\1\3\1\51\1\52\1\53\1\3\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\110\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\22\0"+
    "\2\5\1\74\1\0\1\5\1\75\1\5\1\0\1\76"+
    "\1\77\75\0\2\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\76\1\77\74\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\5\3\1\100\3\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\101\1\102\1\3\1\103\2\3\1\104\3\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\1\3\1\105\7\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\22\0\1\106\1\107\2\0\1\107\1\0\1\107"+
    "\1\110\1\111\43\0\1\112\12\0\1\113\17\0\2\76"+
    "\2\0\1\76\1\0\1\76\45\0\1\114\31\0\3\3"+
    "\1\115\4\3\2\0\1\3\5\0\1\3\6\0\1\3"+
    "\1\116\1\117\1\3\1\0\2\3\1\0\3\3\1\120"+
    "\2\3\1\121\2\3\2\0\1\3\4\0\1\3\1\0"+
    "\2\3\1\122\2\3\34\0\1\20\1\123\40\0\1\124"+
    "\45\0\1\125\40\0\1\126\46\0\1\16\70\0\16\20"+
    "\4\0\65\20\16\127\4\0\3\127\1\130\1\131\1\132"+
    "\57\127\1\0\4\3\1\133\3\3\2\0\1\3\5\0"+
    "\1\3\6\0\1\134\1\135\1\136\1\3\1\0\1\3"+
    "\1\137\1\0\3\3\1\140\1\141\1\3\1\142\2\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\2\3\1\143\1\144"+
    "\1\0\2\3\1\0\5\3\1\145\3\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\146\1\147"+
    "\10\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\6\3\1\150\1\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\151\1\152\1\3\1\0\1\3\1\153\1\3"+
    "\1\154\5\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\64\0\1\155\16\0\1\156\24\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\4\3"+
    "\1\157\4\3\2\0\1\3\4\0\1\3\1\0\1\3"+
    "\1\160\3\3\21\0\10\3\2\0\1\161\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\162\1\163\4\3\1\164"+
    "\3\3\2\0\1\3\4\0\1\3\1\0\5\3\25\0"+
    "\1\165\26\0\2\166\5\0\1\167\2\0\1\170\41\0"+
    "\4\3\1\171\3\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\166\1\172\1\3\1\0\3\3\1\173\2\3"+
    "\1\174\2\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\175\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\176\1\177\1\3\1\0\3\3\1\200"+
    "\5\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\201\5\0\1\3\6\0\3\3\1\202"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\1\3\1\203\5\3"+
    "\1\204\1\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\1\3\1\205\7\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\1\3"+
    "\1\206\1\207\6\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\1\210\2\211\2\210\1\211\1\210\1\211"+
    "\2\0\1\210\5\0\1\210\6\0\4\210\1\0\2\210"+
    "\1\0\1\210\1\212\7\210\2\0\1\210\4\0\1\210"+
    "\1\0\5\210\110\0\1\213\16\0\56\214\1\215\11\214"+
    "\1\216\16\214\2\0\2\217\2\0\1\217\1\0\1\217"+
    "\77\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\7\3\1\220\1\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\3\3\1\221\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\2\3\1\222"+
    "\1\3\1\0\2\3\1\0\5\3\1\223\3\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\107\0\1\224\75\0"+
    "\1\225\11\0\1\226\20\0\1\106\1\107\2\0\1\107"+
    "\1\0\1\107\1\113\1\111\43\0\1\227\12\0\1\230"+
    "\73\0\1\231\105\0\1\232\1\233\14\0\1\234\71\0"+
    "\1\235\106\0\1\236\16\0\1\237\67\0\1\240\17\0"+
    "\1\241\66\0\1\242\32\0\2\243\1\0\4\243\2\0"+
    "\1\243\15\0\1\243\1\0\1\243\2\0\1\243\52\0"+
    "\1\244\5\0\1\244\100\0\2\76\2\0\1\76\1\0"+
    "\1\76\2\0\1\77\75\0\2\245\2\0\1\245\1\0"+
    "\1\245\1\246\57\0\1\246\16\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\1\3"+
    "\1\247\7\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\63\0\1\250\44\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\3\3\1\251\5\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\3\3\1\252\5\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\1\3\1\253\7\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\254\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\22\0\1\255\1\256\1\74\1\0\1\255\1\75\1\255"+
    "\1\0\1\257\1\77\75\0\1\256\1\107\2\0\1\107"+
    "\1\0\1\107\1\0\1\257\1\77\75\0\2\113\2\0"+
    "\1\113\1\0\1\113\1\0\1\260\76\0\2\76\2\0"+
    "\1\76\1\0\1\76\77\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\261\1\262\3\3"+
    "\1\263\4\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\7\3\1\264\1\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\265\1\266\1\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\1\3\1\267\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\10\3\1\270\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\3\3\1\271\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\20\0\15\123\1\272\1\273\70\123\56\0\1\274\30\0"+
    "\16\127\4\0\3\127\1\132\1\131\1\132\57\127\1\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\275\1\276\1\3\1\277\6\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\7\3"+
    "\1\300\1\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\2\3"+
    "\1\301\1\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\302\1\303"+
    "\10\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\304\1\305\10\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\3\3\1\306\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\1\3\1\307\7\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\310\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\3\3\1\311\1\0\2\3\1\0\5\3"+
    "\1\312\3\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\2\3"+
    "\1\313\1\3\1\314\1\315\1\3\1\0\4\3\1\316"+
    "\4\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\3\3\1\317\5\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\54\0\2\320\52\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\320\1\321\1\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\322\1\323\1\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\1\3\1\324"+
    "\7\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\1\3\1\325\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\53\0\1\326\112\0\2\327\47\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\3\3\1\330\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\327\1\331\10\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\4\3\1\332\3\3"+
    "\2\0\1\3\5\0\1\3\6\0\1\3\1\333\2\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\33\0\1\334\74\0\10\3\2\0\1\335"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\54\0\2\336"+
    "\102\0\1\337\2\0\2\340\6\0\1\341\112\0\1\342"+
    "\37\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\336\1\343\1\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\1\3\1\344\2\3\1\340\1\345\1\3"+
    "\1\0\4\3\1\346\4\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\10\3\1\347\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\4\3\1\350\4\3\2\0\1\3\4\0\1\3\1\0"+
    "\4\3\1\351\33\0\1\352\74\0\10\3\2\0\1\353"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\354\1\355"+
    "\1\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\1\3\1\356\3\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\6\3\1\357\2\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\3\3\1\360\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\361\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\1\3"+
    "\1\362\7\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\363\1\364\4\3\1\365\3\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\6\3\1\366"+
    "\1\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\210\2\0\1\210\5\0\1\210\6\0"+
    "\4\210\1\0\2\210\1\0\11\210\1\0\1\367\1\210"+
    "\4\0\1\210\1\0\5\210\22\0\2\211\2\0\1\211"+
    "\1\0\1\211\77\0\10\210\2\0\1\370\5\0\1\210"+
    "\6\0\4\210\1\0\2\210\1\0\11\210\1\0\1\367"+
    "\1\210\4\0\1\210\1\0\5\210\76\0\1\2\32\0"+
    "\2\217\2\0\1\217\1\0\1\217\45\0\1\371\31\0"+
    "\1\372\2\217\2\372\1\217\1\372\1\217\2\0\1\372"+
    "\5\0\1\372\6\0\4\372\1\0\2\372\1\0\11\372"+
    "\1\373\1\0\1\372\4\0\1\372\1\0\5\372\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\374\1\375\10\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\1\3\1\376\7\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\5\3\1\377\3\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\4\3\1\u0100\4\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\76\0\1\u0101"+
    "\106\0\1\u0102\100\0\1\u0103\114\0\1\u0104\32\0\2\245"+
    "\2\0\1\245\1\0\1\245\131\0\1\u0105\54\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\3\3\1\u0106\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\1\3\1\u0107\2\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\u0108\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\3\3\1\u0109"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\22\0\1\255\1\256\2\0\1\255\1\0"+
    "\1\255\1\0\1\257\1\77\75\0\2\256\2\0\1\256"+
    "\1\0\1\256\1\0\1\257\1\77\75\0\2\u010a\2\0"+
    "\1\u010a\1\0\1\u010a\142\0\1\u010b\43\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\4\3\1\u010c\4\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\u010d\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\5\3\1\u010e"+
    "\3\3\2\0\1\3\4\0\1\3\1\0\5\3\33\0"+
    "\1\u010f\74\0\10\3\2\0\1\u0110\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\4\3\1\u0111\3\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\u0112\1\u0113\1\u0114"+
    "\1\u0115\1\u0116\10\3\2\0\1\3\4\0\1\3\1\0"+
    "\1\3\1\u0117\3\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\4\3\1\u0118"+
    "\4\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\2\3\1\u0119"+
    "\1\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\20\0\14\123\1\u011a\1\272\1\273"+
    "\70\123\15\u011b\1\u011c\71\u011b\32\0\1\u011d\55\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\2\3\1\u011e\1\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\3\3\1\u011f\5\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\3\3\1\u0120\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\3\3\1\u0121\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\63\0\1\u011d\44\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\3\3\1\u011e\5\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\61\0\1\u0122\46\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\1\3"+
    "\1\u0123\7\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\6\3\1\u0124\2\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\3\3\1\u0125\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\4\3\1\u0126\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\u0127\1\u0128\1\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\3\3\1\u0129\5\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\2\3\1\u012a\1\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\33\0\1\u012b"+
    "\74\0\10\3\2\0\1\u012c\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\1\3\1\u012d\2\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\u012e\1\u012f"+
    "\1\3\1\0\4\3\1\u0130\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\64\0\1\u0131\43\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\4\3\1\u0132\4\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\64\0\1\u0133\43\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\4\3\1\u0134"+
    "\4\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\3\3\1\u0135"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\64\0\1\u0136\106\0\1\u0137\43\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\4\3\1\u0138\4\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\4\3\1\u0139\4\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\3\3\1\u013a\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\2\3\1\u013b\1\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\33\0\1\u013c\125\0"+
    "\1\u013d\120\0\1\u013e\55\0\1\u013f\125\0\1\u0140\55\0"+
    "\10\3\2\0\1\u0141\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\2\3\1\u0142\1\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\4\3\1\u0143\4\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\u0144\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\2\3\1\u0145\1\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\2\3\1\u0146\6\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\2\3\1\u0147"+
    "\6\3\2\0\1\3\4\0\1\3\1\0\5\3\33\0"+
    "\1\u0148\74\0\10\3\2\0\1\u0149\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\u014a\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\u014b"+
    "\1\u014c\10\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\5\3\1\u014d\3\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\63\0\1\u014e\20\0\1\u014f"+
    "\23\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\3\3\1\u0150\5\3\2\0\1\3"+
    "\4\0\1\3\1\0\2\3\1\u0151\2\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\4\3\1\u0152\4\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\2\3\1\u0153\1\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\47\0\1\u0154"+
    "\60\0\10\210\2\0\1\210\5\0\1\210\6\0\1\210"+
    "\1\u0155\2\210\1\0\2\210\1\0\11\210\1\0\1\367"+
    "\1\210\4\0\1\210\1\0\5\210\21\0\10\372\2\0"+
    "\1\372\5\0\1\372\6\0\4\372\1\0\2\372\1\0"+
    "\11\372\2\0\1\372\4\0\1\372\1\0\5\372\21\0"+
    "\1\372\2\0\2\372\1\0\1\372\3\0\1\372\5\0"+
    "\1\372\6\0\4\372\1\0\2\372\1\0\11\372\2\0"+
    "\1\372\4\0\1\372\1\0\5\372\52\0\1\u0156\55\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\2\3\1\u0157"+
    "\1\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\6\3\1\u0158\1\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\5\3\1\u0159\3\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\67\0\1\u015a\71\0\1\u015b\55\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\2\3\1\u015c"+
    "\1\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\4\3\1\u015d"+
    "\4\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\3\3\1\u015e"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\u015f\1\u0160\4\3\22\0\2\u010a\2\0"+
    "\1\u010a\1\0\1\u010a\2\0\1\77\74\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\3\3\1\u0161\5\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\44\0\1\u0162\12\0\2\u0163\47\0\10\3\2\0"+
    "\1\3\5\0\1\3\2\0\1\u0162\3\0\4\3\1\0"+
    "\2\3\1\u0163\1\u0164\10\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\5\3\1\u0165\3\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\103\0\1\u0166"+
    "\24\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\1\3\1\u0167\3\3\21\0\10\3\2\0\1\u0168"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\25\0\1\u0169"+
    "\102\0\4\3\1\u016a\3\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\7\3"+
    "\1\u016b\1\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\u016c"+
    "\1\0\5\3\20\0\16\u016d\1\2\70\u016d\14\u011b\1\u016e"+
    "\1\u011c\71\u011b\13\0\1\u0122\74\0\10\3\2\0\1\u0123"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\1\3\1\u016f\2\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\2\3\1\u0170\1\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\u0171\1\u0172"+
    "\1\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\50\0\1\u0173\57\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\1\u0174\3\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\u0175\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\u0176\1\u0177\10\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\7\3\1\u0178"+
    "\1\3\2\0\1\3\4\0\1\3\1\0\5\3\54\0"+
    "\2\u0179\52\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\u0179\1\u017a\1\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\u017b"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\3\3\1\u017c\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\7\3\1\u017d\1\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\64\0\1\u017e\43\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\4\3\1\u017f\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\u0180\1\u0181\10\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\61\0\1\u0182"+
    "\46\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\1\3\1\u0183\7\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\u0184\1\0\5\3\57\0\2\u0185"+
    "\77\0\1\u0186\56\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\u0185\1\u0187\10\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\1\3\1\u0188\2\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\2\3\1\u0189\6\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\3\3\1\u018a\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\64\0\1\u018b\104\0\1\u018c\57\0\1\u018d\17\0\1\u018e"+
    "\114\0\1\u018f\60\0\1\u0190\74\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\4\3"+
    "\1\u0191\4\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\2\3\1\u0192\6\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\u0193"+
    "\5\0\1\3\6\0\3\3\1\u0194\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\1\3\1\u0195\7\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\u0196\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\1\3\1\u0197\7\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\u0198\1\u0199\10\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\64\0\1\u019a\43\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\4\3\1\u019b\4\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\u019c\1\u019d\1\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\64\0\1\u019e\43\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\4\3\1\u019f\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\1\3\1\u01a0\3\3\64\0"+
    "\1\u01a1\75\0\1\u01a2\54\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\4\3\1\u01a3"+
    "\4\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\3\3\1\u01a4"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\u01a5\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\u01a6\1\u01a7"+
    "\10\3\2\0\1\3\4\0\1\3\1\0\5\3\22\0"+
    "\7\u01a8\2\0\1\u01a8\14\0\4\u01a8\1\0\2\u01a8\1\0"+
    "\11\u01a8\2\0\1\u01a8\4\0\1\u01a8\1\0\5\u01a8\21\0"+
    "\10\210\2\0\1\210\5\0\1\210\6\0\4\210\1\0"+
    "\2\210\1\0\5\210\1\u01a9\3\210\1\0\1\367\1\210"+
    "\4\0\1\210\1\0\5\210\33\0\1\u01aa\74\0\10\3"+
    "\2\0\1\u01ab\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\3\3"+
    "\1\u01ac\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\70\0\1\u01ad\37\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\u01ae"+
    "\1\u01af\10\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\1\3"+
    "\1\u01b0\2\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\1\3\1\u01b1\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\57\0"+
    "\2\u0163\53\0\1\u01b2\102\0\4\3\1\u01b3\3\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\1\3\1\u01b4\7\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\57\0\2\u01b5\47\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\u01b5"+
    "\1\u01b6\10\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\1\3"+
    "\1\u01b7\2\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\u01b8\1\u01b9"+
    "\10\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\4\3\1\u01ba\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\4\3\1\u01bb"+
    "\4\3\2\0\1\3\4\0\1\3\1\0\5\3\54\0"+
    "\2\u0122\52\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\u0122\1\u0123\1\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\76\0\1\u01bc\31\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\2\0\1\u01bc\1\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\u01bd\1\u01be\1\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\64\0\1\u0122\43\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\4\3\1\u0123\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\5\3\1\u01bf"+
    "\3\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\6\3\1\u01c0\1\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\63\0\1\u01c1\44\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\3\3\1\u01c2\5\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\53\0\1\u01c3\54\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\3\3\1\u01c4\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\51\0\1\u01c5"+
    "\124\0\1\u01c6\40\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\1\3\1\u01c7\2\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\7\3\1\u01c8\1\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\2\3\1\u01c9\1\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\1\3\1\u01ca\7\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\56\0\1\u01cb\103\0\1\u01cc\116\0\1\u01cd"+
    "\50\0\1\u01ce\147\0\1\u01cf\41\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\1\3\1\u01d0\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\3\3\1\u01d1"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\3\3\1\u01d2\5\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\4\3"+
    "\1\u01d3\3\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\6\3\1\u01d4\2\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\3\3\1\u01d5\5\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\61\0\1\u01d6\46\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\1\3"+
    "\1\u01d7\7\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\70\0\1\u01d8\37\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\10\3\1\u01d9\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\64\0\1\u01da\43\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\4\3\1\u01db\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\1\3\1\u01dc\2\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\51\0"+
    "\1\u01dd\56\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\1\3\1\u01de\2\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\22\0\7\u01a8\2\0"+
    "\1\u01a8\13\0\1\u01df\4\u01a8\1\0\2\u01a8\1\0\11\u01a8"+
    "\2\0\1\u01a8\4\0\1\u01a8\1\0\5\u01a8\21\0\10\210"+
    "\2\0\1\210\5\0\1\210\6\0\4\210\1\0\2\210"+
    "\1\0\1\210\1\u01e0\7\210\1\0\1\367\1\210\4\0"+
    "\1\210\1\0\5\210\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\2\3\1\u01e1\1\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\65\0"+
    "\1\u01e2\42\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\5\3\1\u01e3\3\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\7\3\1\u01e4\1\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\u01e5\1\u01e6\1\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\u01e7"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\64\0\1\u01e8"+
    "\43\0\10\3\2\0\1\3\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\4\3\1\u01e9\4\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\2\3\1\u01ea\1\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\52\0\1\u01eb\55\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\2\3\1\u01ec\1\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\u01ed\1\u01ee\10\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\1\u01ef\3\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\70\0\1\u01f0\37\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\10\3\1\u01f1\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\1\3\1\u0123\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\2\3\1\u01f2\1\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\62\0\1\u01f3\45\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\2\3\1\u01f4\6\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\51\0\1\u01f5"+
    "\56\0\10\3\2\0\1\3\5\0\1\3\6\0\1\3"+
    "\1\u01f6\2\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\4\3"+
    "\1\u01f7\4\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\u01f8\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\33\0\1\u01f9\131\0\1\u01fa\101\0\1\u01fb"+
    "\110\0\1\u01fc\66\0\1\u01fd\74\0\10\3\2\0\1\u01fe"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\1\3"+
    "\1\u01ff\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\1\3\1\u0200\2\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\3\3\1\u0201\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\u0202\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\33\0\1\u0203\74\0\10\3\2\0\1\u0204"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\53\0\1\u0205"+
    "\54\0\10\3\2\0\1\3\5\0\1\3\6\0\3\3"+
    "\1\u0206\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\33\0\1\u0207\74\0\10\3\2\0"+
    "\1\u0208\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\4\3\1\u0209\4\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\74\0\1\u020a\33\0\10\210\2\0"+
    "\1\210\5\0\1\210\6\0\4\210\1\0\1\210\1\u020b"+
    "\1\0\11\210\1\0\1\367\1\210\4\0\1\210\1\0"+
    "\5\210\63\0\1\u020c\44\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\3\3\1\u020d"+
    "\5\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\3\3\1\u020e"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\51\0\1\u020f\56\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\1\3\1\u0210\2\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\3\5\0\1\3\6\0\3\3"+
    "\1\u0211\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\33\0\1\u0212\74\0\10\3\2\0"+
    "\1\u0213\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\65\0"+
    "\1\u0214\42\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\5\3\1\u0215\3\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\1\3\1\u0216\2\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\53\0\1\u0217\54\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\3\3\1\u0218\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\u0219\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\33\0\1\u021a\74\0\10\3\2\0\1\u021b\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\64\0\1\u021c\43\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\4\3\1\u021d\4\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\50\0\1\u021e\123\0\1\u021f\54\0\1\u0220"+
    "\124\0\1\u0221\120\0\1\u0222\44\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\1\u0223\3\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\5\3\1\u0224\3\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\u0225\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\1\3\1\u0226\2\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\3\3\1\u0227\5\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\50\0\1\u0228\57\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\1\u0229\3\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\51\0\1\u022a\56\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\1\3\1\u022b\2\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\21\0\10\3\2\0\1\u022c\5\0\1\3\6\0\4\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\210\2\0\1\210\5\0\1\210"+
    "\6\0\4\210\1\u022d\2\210\1\0\11\210\1\0\1\367"+
    "\1\210\4\0\1\210\1\0\5\210\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\1\3\1\u022e\2\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\67\0\1\u022f\40\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\7\3\1\u0230"+
    "\1\3\2\0\1\3\4\0\1\3\1\0\5\3\21\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\1\3\1\u0231\7\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\63\0\1\u0122\44\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\3\3\1\u0123\5\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\5\3\1\u0232\3\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\51\0\1\u011d\56\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\1\3\1\u011e"+
    "\2\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\65\0\1\u0233\46\0\1\u0234\146\0"+
    "\1\u0235\54\0\1\u0236\137\0\1\u0237\43\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\5\3\1\u0238\3\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\4\3\1\u0239\3\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\21\0\10\3\2\0"+
    "\1\3\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\5\3\1\u023a\3\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\u023b\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\21\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\4\3\1\u023c"+
    "\4\3\2\0\1\3\4\0\1\3\1\0\5\3\65\0"+
    "\1\u023d\42\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\5\3\1\u023e\3\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\33\0\1\u023f\74\0"+
    "\10\3\2\0\1\u0240\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\21\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\1\3\1\u0241\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\33\0\1\u0242\74\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\7\3\1\u0243\1\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\10\3\2\0\1\u0244\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\0\11\3\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\21\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\6\3"+
    "\1\u0245\2\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\63\0\1\u0246\50\0\1\u0247\135\0\2\u0248\52\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\0\2\3"+
    "\1\0\3\3\1\u0249\5\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\21\0\4\3\1\u024a\3\3\2\0\1\3"+
    "\5\0\1\3\6\0\4\3\1\0\2\3\1\0\11\3"+
    "\2\0\1\3\4\0\1\3\1\0\5\3\21\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\4\3\1\u0248\1\u024b"+
    "\1\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\63\0\1\u024c\44\0\10\3\2\0\1\3\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\3\3\1\u024d"+
    "\5\3\2\0\1\3\4\0\1\3\1\0\5\3\64\0"+
    "\1\u024e\43\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\10\3\1\u024f\2\0\1\3"+
    "\4\0\1\3\1\0\5\3\51\0\1\u0250\56\0\10\3"+
    "\2\0\1\3\5\0\1\3\6\0\1\3\1\u0251\2\3"+
    "\1\0\2\3\1\0\11\3\2\0\1\3\4\0\1\3"+
    "\1\0\5\3\51\0\1\u0252\56\0\10\3\2\0\1\3"+
    "\5\0\1\3\6\0\1\3\1\u0253\2\3\1\0\2\3"+
    "\1\0\11\3\2\0\1\3\4\0\1\3\1\0\5\3"+
    "\72\0\1\367\35\0\10\3\2\0\1\3\5\0\1\3"+
    "\6\0\4\3\1\0\2\3\1\u0254\1\u0255\10\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\33\0\1\u0256\74\0"+
    "\10\3\2\0\1\u0257\5\0\1\3\6\0\4\3\1\0"+
    "\2\3\1\0\11\3\2\0\1\3\4\0\1\3\1\0"+
    "\5\3\33\0\1\u0258\74\0\10\3\2\0\1\u0259\5\0"+
    "\1\3\6\0\4\3\1\0\2\3\1\0\11\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\52\0\1\u025a\55\0"+
    "\10\3\2\0\1\3\5\0\1\3\6\0\2\3\1\u025b"+
    "\1\3\1\0\2\3\1\0\11\3\2\0\1\3\4\0"+
    "\1\3\1\0\5\3\33\0\1\u025c\74\0\10\3\2\0"+
    "\1\u025d\5\0\1\3\6\0\4\3\1\0\2\3\1\0"+
    "\11\3\2\0\1\3\4\0\1\3\1\0\5\3\61\0"+
    "\1\u025e\46\0\10\3\2\0\1\3\5\0\1\3\6\0"+
    "\4\3\1\0\2\3\1\0\1\3\1\u025f\7\3\2\0"+
    "\1\3\4\0\1\3\1\0\5\3\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32873];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\1\11\3\1\1\11\21\1\2\11"+
    "\17\1\7\11\2\0\1\1\1\0\1\1\1\0\7\1"+
    "\1\0\1\11\1\0\1\11\6\1\1\0\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\14\1\1\0\2\1\1\11"+
    "\3\1\2\0\3\1\1\0\2\1\1\11\3\0\5\1"+
    "\1\0\14\1\1\11\1\0\2\1\1\0\4\1\2\11"+
    "\1\1\1\11\2\1\1\0\1\11\1\1\6\11\3\1"+
    "\1\0\1\1\1\0\5\1\4\0\3\1\1\0\4\1"+
    "\1\0\1\1\1\11\1\0\4\1\1\0\1\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\3\1\2\0"+
    "\4\1\1\11\1\1\5\0\7\1\1\11\1\1\1\0"+
    "\6\1\1\0\3\1\1\0\1\1\1\11\1\1\2\0"+
    "\4\1\2\11\1\0\1\11\1\0\4\1\1\0\1\11"+
    "\6\1\1\0\2\1\1\0\5\1\3\0\4\1\1\0"+
    "\4\1\1\0\3\1\1\11\2\1\1\0\2\1\1\11"+
    "\1\1\1\0\2\1\2\0\4\1\5\0\7\1\1\0"+
    "\2\1\1\0\2\1\2\0\4\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\11\3\1\1\11\2\1\2\0\2\1"+
    "\1\0\2\1\1\11\3\1\1\0\1\11\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\11\4\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\2\0\4\1\1\11"+
    "\5\0\7\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\11\1\0\3\1\1\11\2\1"+
    "\1\0\2\1\1\0\3\1\1\11\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\2\11\4\1\5\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\2\1\1\0\2\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\4\1\4\0\7\1\1\0\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\0\2\1\1\11\1\1\1\0"+
    "\2\1\1\0\2\1\1\11\1\1\1\11\1\1\5\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\1\1\1\11"+
    "\3\1\1\0\1\11\1\0\1\11\1\0\5\1\1\0"+
    "\1\1\1\11\2\1\1\0\3\1\1\0\2\11\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[607];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String token; 
    public int lineNumber; 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PHPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { token = yytext(); lineNumber = yyline; return ERROR;
            }
          case 132: break;
          case 2: 
            { token = yytext(); lineNumber = yyline; return ID;
            }
          case 133: break;
          case 3: 
            { token = yytext(); lineNumber = yyline; return NUMBER;
            }
          case 134: break;
          case 4: 
            { token = yytext(); lineNumber = yyline; return MINUS;
            }
          case 135: break;
          case 5: 
            { token = yytext(); lineNumber = yyline; return DOT;
            }
          case 136: break;
          case 6: 
            { token = yytext(); lineNumber = yyline; return DIV;
            }
          case 137: break;
          case 7: 
            { token = yytext(); lineNumber = yyline; return MULT;
            }
          case 138: break;
          case 8: 
            { /*Nothing jaja*/
            }
          case 139: break;
          case 9: 
            { token = yytext(); lineNumber = yyline; return COMMENT;
            }
          case 140: break;
          case 10: 
            { token = yytext(); lineNumber = yyline; return QUOTATION;
            }
          case 141: break;
          case 11: 
            { token = yytext(); lineNumber = yyline; return ESC;
            }
          case 142: break;
          case 12: 
            { token = yytext(); lineNumber = yyline; return S_QUOTATION;
            }
          case 143: break;
          case 13: 
            { token = yytext(); lineNumber = yyline; return RECT_OPEN_BRACE;
            }
          case 144: break;
          case 14: 
            { token = yytext(); lineNumber = yyline; return RECT_CLOSE_BRACE;
            }
          case 145: break;
          case 15: 
            { token = yytext(); lineNumber = yyline; return QUESTION;
            }
          case 146: break;
          case 16: 
            { token = yytext(); lineNumber = yyline; return ASSING;
            }
          case 147: break;
          case 17: 
            { token = yytext(); lineNumber = yyline; return CLOSE_BRACE;
            }
          case 148: break;
          case 18: 
            { token = yytext(); lineNumber = yyline; return COLON;
            }
          case 149: break;
          case 19: 
            { token = yytext(); lineNumber = yyline; return GREATER;
            }
          case 150: break;
          case 20: 
            { token = yytext(); lineNumber = yyline; return PLUS;
            }
          case 151: break;
          case 21: 
            { token = yytext(); lineNumber = yyline; return NOT;
            }
          case 152: break;
          case 22: 
            { token = yytext(); lineNumber = yyline; return LESS;
            }
          case 153: break;
          case 23: 
            { token = yytext(); lineNumber = yyline; return MOD;
            }
          case 154: break;
          case 24: 
            { token = yytext(); lineNumber = yyline; return BIT_AND;
            }
          case 155: break;
          case 25: 
            { token = yytext(); lineNumber = yyline; return BIT_OR;
            }
          case 156: break;
          case 26: 
            { token = yytext(); lineNumber = yyline; return BIT_XOR;
            }
          case 157: break;
          case 27: 
            { token = yytext(); lineNumber = yyline; return SEMICOLON;
            }
          case 158: break;
          case 28: 
            { token = yytext(); lineNumber = yyline; return COMMA;
            }
          case 159: break;
          case 29: 
            { token = yytext(); lineNumber = yyline; return OPEN_BRACE;
            }
          case 160: break;
          case 30: 
            { token = yytext(); lineNumber = yyline; return OPEN_CURLY_BRACE;
            }
          case 161: break;
          case 31: 
            { token = yytext(); lineNumber = yyline; return CLOSE_CURLY_BRACE;
            }
          case 162: break;
          case 32: 
            { token = yytext(); lineNumber = yyline; return BIT_NOT;
            }
          case 163: break;
          case 33: 
            { token = yytext(); lineNumber = yyline; return AT;
            }
          case 164: break;
          case 34: 
            { token = yytext(); lineNumber = yyline; return REAL_NUM;
            }
          case 165: break;
          case 35: 
            { token = yytext(); lineNumber = yyline; return DECR;
            }
          case 166: break;
          case 36: 
            { token = yytext(); lineNumber = yyline; return MINUS_EQUAL;
            }
          case 167: break;
          case 37: 
            { token = yytext(); lineNumber = yyline; return CONCAT_EQUAL;
            }
          case 168: break;
          case 38: 
            { token = yytext(); lineNumber = yyline; return DIV_EQUAL;
            }
          case 169: break;
          case 39: 
            { token = yytext(); lineNumber = yyline; return POW;
            }
          case 170: break;
          case 40: 
            { token = yytext(); lineNumber = yyline; return MULT_EQUAL;
            }
          case 171: break;
          case 41: 
            { token = yytext(); lineNumber = yyline; return STRING;
            }
          case 172: break;
          case 42: 
            { token = yytext(); lineNumber = yyline; return AS;
            }
          case 173: break;
          case 43: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return DO;
            }
          case 174: break;
          case 44: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return IF;
            }
          case 175: break;
          case 45: 
            { token = yytext(); lineNumber = yyline; return OR;
            }
          case 176: break;
          case 46: 
            { token = yytext(); lineNumber = yyline; return VAR;
            }
          case 177: break;
          case 47: 
            { token = yytext(); lineNumber = yyline; return CLOSE;
            }
          case 178: break;
          case 48: 
            { token = yytext(); lineNumber = yyline; return EQUAL;
            }
          case 179: break;
          case 49: 
            { token = yytext(); lineNumber = yyline; return ARROW;
            }
          case 180: break;
          case 50: 
            { token = yytext(); lineNumber = yyline; return DOUBLE_COLON;
            }
          case 181: break;
          case 51: 
            { token = yytext(); lineNumber = yyline; return GREATER_EQUAL;
            }
          case 182: break;
          case 52: 
            { token = yytext(); lineNumber = yyline; return SR;
            }
          case 183: break;
          case 53: 
            { token = yytext(); lineNumber = yyline; return PLUSS_EQUAL;
            }
          case 184: break;
          case 54: 
            { token = yytext(); lineNumber = yyline; return INCR;
            }
          case 185: break;
          case 55: 
            { token = yytext(); lineNumber = yyline; return NOT_EQUAL;
            }
          case 186: break;
          case 56: 
            { token = yytext(); lineNumber = yyline; return LESS_EQUAL;
            }
          case 187: break;
          case 57: 
            { token = yytext(); lineNumber = yyline; return SL;
            }
          case 188: break;
          case 58: 
            { token = yytext(); lineNumber = yyline; return MOD_EQUAL;
            }
          case 189: break;
          case 59: 
            { token = yytext(); lineNumber = yyline; return AND_EQUAL;
            }
          case 190: break;
          case 60: 
            { token = yytext(); lineNumber = yyline; return SYM_AND;
            }
          case 191: break;
          case 61: 
            { token = yytext(); lineNumber = yyline; return OR_EQUAL;
            }
          case 192: break;
          case 62: 
            { token = yytext(); lineNumber = yyline; return SYM_OR;
            }
          case 193: break;
          case 63: 
            { token = yytext(); lineNumber = yyline; return XOR_EQUAL;
            }
          case 194: break;
          case 64: 
            { token = yytext(); lineNumber = yyline; return XOR;
            }
          case 195: break;
          case 65: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return FOR;
            }
          case 196: break;
          case 66: 
            { token = yytext(); lineNumber = yyline; return POW_EQUAL;
            }
          case 197: break;
          case 67: 
            { token = yytext(); lineNumber = yyline; return AND;
            }
          case 198: break;
          case 68: 
            { token = yytext(); lineNumber = yyline; return DIE;
            }
          case 199: break;
          case 69: 
            { token = yytext(); lineNumber = yyline; return USE;
            }
          case 200: break;
          case 70: 
            { token = yytext(); lineNumber = yyline; return NEW;
            }
          case 201: break;
          case 71: 
            { token = yytext(); lineNumber = yyline; return TRY;
            }
          case 202: break;
          case 72: 
            { token = yytext(); lineNumber = yyline; return IDENTICAL;
            }
          case 203: break;
          case 73: 
            { token = yytext(); lineNumber = yyline; return SR_EQUAL;
            }
          case 204: break;
          case 74: 
            { token = yytext(); lineNumber = yyline; return NOT_IDENTICAL;
            }
          case 205: break;
          case 75: 
            { token = yytext(); lineNumber = yyline; return SL_EQUAL;
            }
          case 206: break;
          case 76: 
            { token = yytext(); lineNumber = yyline; return EXIT;
            }
          case 207: break;
          case 77: 
            { token = yytext(); lineNumber = yyline; return ECHO;
            }
          case 208: break;
          case 78: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return ELSE;
            }
          case 209: break;
          case 79: 
            { token = yytext(); lineNumber = yyline; return EVAL;
            }
          case 210: break;
          case 80: 
            { token = yytext(); lineNumber = yyline; return CASE;
            }
          case 211: break;
          case 81: 
            { token = yytext(); lineNumber = yyline; return LIST;
            }
          case 212: break;
          case 82: 
            { token = yytext(); lineNumber = yyline; return GOTO;
            }
          case 213: break;
          case 83: 
            { token = yytext(); lineNumber = yyline; return FINAL;
            }
          case 214: break;
          case 84: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return BREAK;
            }
          case 215: break;
          case 85: 
            { token = yytext(); lineNumber = yyline; return ENDIF;
            }
          case 216: break;
          case 86: 
            { token = yytext(); lineNumber = yyline; return EMPTY;
            }
          case 217: break;
          case 87: 
            { token = yytext(); lineNumber = yyline; return CLASS;
            }
          case 218: break;
          case 88: 
            { token = yytext(); lineNumber = yyline; return CLONE;
            }
          case 219: break;
          case 89: 
            { token = yytext(); lineNumber = yyline; return CATCH;
            }
          case 220: break;
          case 90: 
            { token = yytext(); lineNumber = yyline; return CONST;
            }
          case 221: break;
          case 91: 
            { token = yytext(); lineNumber = yyline; return ARRAY;
            }
          case 222: break;
          case 92: 
            { token = yytext(); lineNumber = yyline; return ISSET;
            }
          case 223: break;
          case 93: 
            { token = yytext(); lineNumber = yyline; return UNSET;
            }
          case 224: break;
          case 94: 
            { token = yytext(); lineNumber = yyline; return TRAIT;
            }
          case 225: break;
          case 95: 
            { token = yytext(); lineNumber = yyline; return THROW;
            }
          case 226: break;
          case 96: 
            { token = yytext(); lineNumber = yyline; return PRINT;
            }
          case 227: break;
          case 97: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return WHILE;
            }
          case 228: break;
          case 98: 
            { token = yytext(); lineNumber = yyline; return INI;
            }
          case 229: break;
          case 99: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return ELSEIF;
            }
          case 230: break;
          case 100: 
            { token = yytext(); lineNumber = yyline; return ENDFOR;
            }
          case 231: break;
          case 101: 
            { token = yytext(); lineNumber = yyline; return C_CONSTANT;
            }
          case 232: break;
          case 102: 
            { token = yytext(); lineNumber = yyline; return STATIC;
            }
          case 233: break;
          case 103: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return SWITCH;
            }
          case 234: break;
          case 104: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return RETURN;
            }
          case 235: break;
          case 105: 
            { token = yytext(); lineNumber = yyline; return PUBLIC;
            }
          case 236: break;
          case 106: 
            { token = yytext(); lineNumber = yyline; return GLOBAL;
            }
          case 237: break;
          case 107: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return FOREACH;
            }
          case 238: break;
          case 108: 
            { token = yytext(); lineNumber = yyline; return EXTENDS;
            }
          case 239: break;
          case 109: 
            { token = yytext(); lineNumber = yyline; return DEFAULT;
            }
          case 240: break;
          case 110: 
            { token = yytext(); lineNumber = yyline; return DECLARE;
            }
          case 241: break;
          case 111: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return INCLUDE;
            }
          case 242: break;
          case 112: 
            { token = yytext(); lineNumber = yyline; return REQUIRE;
            }
          case 243: break;
          case 113: 
            { token = yytext(); lineNumber = yyline; return PRIVATE;
            }
          case 244: break;
          case 114: 
            { token = yytext(); lineNumber = yyline; return DB;
            }
          case 245: break;
          case 115: 
            { token = yytext(); lineNumber = yyline; return FUNCTION;
            }
          case 246: break;
          case 116: 
            { token = yytext(); lineNumber = yyline; return ENDWHILE;
            }
          case 247: break;
          case 117: 
            { token = yytext(); lineNumber = yyline; return CALLABLE;
            }
          case 248: break;
          case 118: 
            { token = yytext().toLowerCase(); lineNumber = yyline; return CONTINUE;
            }
          case 249: break;
          case 119: 
            { token = yytext(); lineNumber = yyline; return ABSTRACT;
            }
          case 250: break;
          case 120: 
            { token = yytext(); lineNumber = yyline; return ENDSWITCH;
            }
          case 251: break;
          case 121: 
            { token = yytext(); lineNumber = yyline; return INSTEADOF;
            }
          case 252: break;
          case 122: 
            { token = yytext(); lineNumber = yyline; return INTERFACE;
            }
          case 253: break;
          case 123: 
            { token = yytext(); lineNumber = yyline; return NAMESPACE;
            }
          case 254: break;
          case 124: 
            { token = yytext(); lineNumber = yyline; return PROTECTED;
            }
          case 255: break;
          case 125: 
            { token = yytext(); lineNumber = yyline; return ENDFOREACH;
            }
          case 256: break;
          case 126: 
            { token = yytext(); lineNumber = yyline; return ENDDECLARE;
            }
          case 257: break;
          case 127: 
            { token = yytext(); lineNumber = yyline; return INSTANCEOF;
            }
          case 258: break;
          case 128: 
            { token = yytext(); lineNumber = yyline; return IMPLEMENTS;
            }
          case 259: break;
          case 129: 
            { token = yytext(); lineNumber = yyline; return INCLUDE_ONCE;
            }
          case 260: break;
          case 130: 
            { token = yytext(); lineNumber = yyline; return REQUIRE_ONCE;
            }
          case 261: break;
          case 131: 
            { token = yytext(); lineNumber = yyline; return HALT_COMPILER;
            }
          case 262: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
