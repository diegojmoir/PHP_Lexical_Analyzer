/* The following code was generated by JFlex 1.6.1 */


package analizador_lexico;
/*you shoukd import your enum file with all the symbols */ 
import static analizador_lexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Diego PÃ©rez Moir/Desktop/U/Quinto Cinclo/Lenguajes Formales y Automatas/Analizador Lexico/src/analizador_lexico/PHP.flex</tt>
 */
class PHPLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\16\1\26\1\26\1\22\22\0\1\21\1\103\1\23"+
    "\1\14\1\122\1\105\1\106\1\27\1\115\1\116\1\17\1\102\1\112"+
    "\1\11\1\12\1\15\1\2\1\10\6\6\2\3\1\77\1\111\1\104"+
    "\1\100\1\101\1\124\1\123\1\33\1\7\1\31\1\35\1\41\1\40"+
    "\1\1\1\47\1\36\2\1\1\32\1\46\1\43\1\45\1\50\1\1"+
    "\1\37\1\34\1\44\1\42\2\1\1\4\2\1\1\113\1\25\1\114"+
    "\1\110\1\30\1\0\1\52\1\63\1\55\1\66\1\13\1\5\1\75"+
    "\1\51\1\61\1\1\1\70\1\53\1\57\1\65\1\56\1\60\1\76"+
    "\1\62\1\64\1\54\1\71\1\73\1\72\1\74\1\67\1\1\1\117"+
    "\1\107\1\120\1\121\6\1\1\24\172\1\u1f28\0\1\26\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\1\4\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\10\1\1\22\2\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\1\2\0\1\37\1\0"+
    "\3\2\2\3\1\40\1\0\1\41\1\0\1\42\6\2"+
    "\1\0\1\43\1\44\1\45\1\0\1\46\1\0\1\46"+
    "\12\2\1\47\7\2\1\50\2\2\1\51\12\2\1\52"+
    "\10\2\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\0\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\2\3\1\37\1\0\1\74\2\2"+
    "\1\3\3\0\7\2\1\0\1\75\13\2\1\76\3\2"+
    "\1\77\23\2\1\100\3\2\1\101\1\102\2\2\1\103"+
    "\1\104\2\2\1\105\1\106\1\107\1\110\1\0\3\2"+
    "\1\0\1\111\1\112\6\2\1\113\1\2\1\114\1\6"+
    "\12\2\1\115\4\2\1\116\30\2\1\117\1\0\1\2"+
    "\1\120\1\2\1\0\1\2\1\121\1\2\1\122\13\2"+
    "\1\123\1\2\1\124\1\125\1\2\1\126\1\127\1\130"+
    "\1\2\1\131\1\2\1\132\3\2\1\133\6\2\1\134"+
    "\5\2\1\135\1\136\1\2\1\137\2\2\1\0\1\140"+
    "\1\141\5\2\1\142\10\2\1\143\5\2\1\144\1\2"+
    "\1\145\1\146\3\2\1\147\1\150\1\2\1\140\4\2"+
    "\1\151\7\2\1\152\2\2\1\153\2\2\1\154\1\2"+
    "\1\155\1\156\1\157\3\2\1\160\3\2\1\161\1\162"+
    "\1\163\11\2\1\164\2\2\1\165\1\2\1\166\1\2"+
    "\1\167\2\2\1\170\1\171\1\172\1\2\1\173\1\2"+
    "\1\174\5\2\1\175\1\176\2\2\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\125\0\u03a7\0\u03fc\0\u0451\0\u04a6"+
    "\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e"+
    "\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6"+
    "\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49\0\u0c9e"+
    "\0\u0cf3\0\u0d48\0\u0d9d\0\125\0\125\0\125\0\125\0\125"+
    "\0\125\0\125\0\125\0\125\0\125\0\125\0\u0df2\0\u0e47"+
    "\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u1045\0\u109a\0\u10ef"+
    "\0\u1144\0\u1199\0\125\0\u1144\0\125\0\u11ee\0\u1243\0\u1298"+
    "\0\u12ed\0\u1342\0\u1397\0\u13ec\0\125\0\u1441\0\125\0\u0451"+
    "\0\125\0\u1496\0\u0451\0\u14eb\0\u1540\0\u1595\0\u15ea\0\u163f"+
    "\0\u1694\0\u16e9\0\u173e\0\u1793\0\u17e8\0\252\0\u183d\0\u1892"+
    "\0\u18e7\0\u193c\0\u1991\0\u19e6\0\u1a3b\0\252\0\u1a90\0\u1ae5"+
    "\0\252\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38"+
    "\0\u1d8d\0\u1de2\0\u1e37\0\252\0\u1e8c\0\u1ee1\0\u1f36\0\u1f8b"+
    "\0\u1fe0\0\u2035\0\u208a\0\u20df\0\125\0\u2134\0\125\0\125"+
    "\0\u2189\0\125\0\u1144\0\u21de\0\125\0\u2233\0\u2288\0\125"+
    "\0\125\0\125\0\125\0\125\0\125\0\125\0\u0e47\0\u0e9c"+
    "\0\u22dd\0\u22dd\0\u2332\0\u2387\0\u23dc\0\u2431\0\u2486\0\u0ef1"+
    "\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f\0\u2684\0\u26d9\0\u272e"+
    "\0\u2783\0\125\0\u27d8\0\u282d\0\u2882\0\u28d7\0\u292c\0\u2981"+
    "\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a\0\252\0\u2b7f\0\u2bd4"+
    "\0\u2c29\0\252\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27"+
    "\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a\0\u30cf"+
    "\0\u3124\0\u3179\0\u31ce\0\u3223\0\u3278\0\252\0\u32cd\0\u3322"+
    "\0\u3377\0\252\0\252\0\u33cc\0\u3421\0\252\0\252\0\u3476"+
    "\0\u34cb\0\125\0\125\0\125\0\125\0\u3520\0\u3575\0\u35ca"+
    "\0\u361f\0\u3674\0\u36c9\0\252\0\u371e\0\u3773\0\u37c8\0\u381d"+
    "\0\u3872\0\u38c7\0\252\0\u391c\0\252\0\u13ec\0\u3971\0\u39c6"+
    "\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e"+
    "\0\252\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\252\0\u3e17\0\u3e6c"+
    "\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\u40bf\0\u4114"+
    "\0\u4169\0\u41be\0\u4213\0\u4268\0\u42bd\0\u4312\0\u4367\0\u43bc"+
    "\0\u4411\0\u4466\0\u44bb\0\u4510\0\u4565\0\u45ba\0\252\0\u460f"+
    "\0\u4664\0\252\0\u46b9\0\u470e\0\u4763\0\252\0\u47b8\0\252"+
    "\0\u480d\0\u4862\0\u48b7\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u4a60"+
    "\0\u4ab5\0\u4b0a\0\u4b5f\0\252\0\u4bb4\0\252\0\252\0\u4c09"+
    "\0\252\0\252\0\252\0\u4c5e\0\252\0\u4cb3\0\252\0\u4d08"+
    "\0\u4d5d\0\u4db2\0\252\0\u4e07\0\u4e5c\0\u4eb1\0\u4f06\0\u4f5b"+
    "\0\u4fb0\0\252\0\u5005\0\u505a\0\u50af\0\u5104\0\u5159\0\252"+
    "\0\252\0\u51ae\0\125\0\u5203\0\u5258\0\u52ad\0\252\0\u5302"+
    "\0\u5357\0\u53ac\0\u5401\0\u5456\0\u54ab\0\125\0\u5500\0\u5555"+
    "\0\u55aa\0\u55ff\0\u5654\0\u56a9\0\u56fe\0\u5753\0\252\0\u57a8"+
    "\0\u57fd\0\u5852\0\u58a7\0\u58fc\0\252\0\u5951\0\252\0\252"+
    "\0\u59a6\0\u59fb\0\u5a50\0\252\0\252\0\u5aa5\0\125\0\u5afa"+
    "\0\u5b4f\0\u5ba4\0\u5bf9\0\252\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d"+
    "\0\u5da2\0\u5df7\0\u5e4c\0\252\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0"+
    "\0\u5ff5\0\u604a\0\u609f\0\252\0\252\0\252\0\u60f4\0\u6149"+
    "\0\u619e\0\252\0\u61f3\0\u6248\0\u629d\0\252\0\252\0\252"+
    "\0\u62f2\0\u6347\0\u639c\0\u63f1\0\u6446\0\u649b\0\u64f0\0\u6545"+
    "\0\u659a\0\252\0\u65ef\0\u6644\0\252\0\u6699\0\252\0\u66ee"+
    "\0\252\0\u6743\0\u6798\0\252\0\252\0\252\0\u67ed\0\252"+
    "\0\u6842\0\252\0\u6897\0\u68ec\0\u6941\0\u6996\0\u69eb\0\252"+
    "\0\252\0\u6a40\0\u6a95\0\252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\5\1\3"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\14\1\16\1\17\1\3\1\2\1\0\1\17\1\20"+
    "\21\3\1\21\1\22\1\23\1\24\1\25\1\3\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\3\1\35"+
    "\1\36\1\37\1\40\1\41\1\3\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\126\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\47\3\30\0\2\5\1\70\1\0\1\5"+
    "\1\71\1\5\1\0\1\72\1\73\25\0\1\73\21\0"+
    "\1\71\10\0\1\70\32\0\2\5\2\0\1\5\1\0"+
    "\1\5\1\0\1\72\1\73\25\0\1\73\64\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\26\3\1\74\2\3"+
    "\1\75\7\3\1\76\5\3\30\0\1\77\1\100\2\0"+
    "\1\100\1\0\1\100\1\101\1\102\65\0\1\103\1\0"+
    "\1\104\24\0\2\72\2\0\1\72\1\0\1\72\67\0"+
    "\1\105\25\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\23\3\1\106\1\3\1\107\1\3\1\110\5\3\1\111"+
    "\5\3\1\112\1\113\2\3\26\0\16\12\1\0\3\12"+
    "\1\0\102\12\15\0\1\12\1\0\1\114\60\0\1\115"+
    "\43\0\1\116\60\0\1\117\42\0\1\14\106\0\16\120"+
    "\1\0\3\120\1\0\1\121\1\0\1\122\1\0\1\123"+
    "\75\120\1\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\1\124\1\125\1\126\2\3\1\127\2\3\1\130\2\3"+
    "\1\131\1\132\1\3\1\133\30\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\32\3\1\134\1\135\1\136"+
    "\1\137\11\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\31\3\1\140\15\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\21\3\1\141\10\3\1\142\14\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\22\3"+
    "\1\143\1\144\2\3\1\145\20\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\32\3\1\146\14\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\32\3\1\147"+
    "\6\3\1\150\5\3\27\0\4\3\1\151\3\3\2\0"+
    "\1\3\10\0\1\3\3\0\27\3\1\152\4\3\1\153"+
    "\1\154\11\3\27\0\10\3\2\0\1\155\10\0\1\3"+
    "\3\0\47\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\32\3\1\156\14\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\24\3\1\157\15\3\1\160\4\3"+
    "\27\0\10\3\2\0\1\161\10\0\1\3\3\0\22\3"+
    "\1\162\24\3\27\0\10\3\2\0\1\163\10\0\1\3"+
    "\3\0\26\3\1\164\2\3\1\165\15\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\34\3\1\166\1\167"+
    "\11\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\21\3\1\170\25\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\22\3\1\171\24\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\26\3\1\172\20\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\23\3\1\173"+
    "\2\3\1\174\20\3\125\0\1\175\125\0\1\176\1\177"+
    "\123\0\1\200\1\201\25\0\1\77\1\100\2\0\1\100"+
    "\1\0\1\100\1\104\1\102\65\0\1\202\1\0\1\203"+
    "\122\0\1\204\124\0\1\205\3\0\1\206\17\0\1\207"+
    "\100\0\1\210\124\0\1\211\5\0\1\212\116\0\1\213"+
    "\6\0\1\214\115\0\1\215\125\0\1\216\25\0\2\217"+
    "\1\0\4\217\2\0\1\217\15\0\1\217\1\0\1\217"+
    "\1\0\1\217\2\0\2\217\10\0\1\217\2\0\1\217"+
    "\5\0\1\217\2\0\1\217\40\0\1\220\5\0\1\220"+
    "\116\0\2\72\2\0\1\72\1\0\1\72\2\0\1\73"+
    "\25\0\1\73\65\0\2\221\2\0\1\221\1\0\1\221"+
    "\1\222\70\0\1\222\23\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\32\3\1\223\14\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\35\3\1\224\11\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\35\3\1\225"+
    "\11\3\30\0\1\226\1\227\1\70\1\0\1\226\1\71"+
    "\1\226\1\0\1\230\1\73\25\0\1\73\21\0\1\71"+
    "\10\0\1\70\32\0\1\227\1\100\2\0\1\100\1\0"+
    "\1\100\1\0\1\230\1\73\25\0\1\73\65\0\2\104"+
    "\2\0\1\104\1\0\1\104\1\0\1\231\114\0\2\72"+
    "\2\0\1\72\1\0\1\72\115\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\34\3\1\232\12\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\21\3\1\233\25\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\30\3"+
    "\1\234\16\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\36\3\1\235\10\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\22\3\1\236\24\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\24\3\1\237\4\3"+
    "\1\240\15\3\26\0\17\114\1\241\105\114\100\0\1\242"+
    "\24\0\16\120\1\0\3\120\1\0\1\123\1\0\1\122"+
    "\1\0\1\123\75\120\1\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\21\3\1\243\25\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\2\3\1\244\44\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\6\3\1\245"+
    "\40\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\6\3\1\246\40\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\6\3\1\247\3\3\1\250\34\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\3\3\1\251"+
    "\43\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\7\3\1\252\37\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\11\3\1\253\35\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\32\3\1\254\14\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\34\3\1\255"+
    "\12\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\36\3\1\256\10\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\34\3\1\257\12\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\32\3\1\260\14\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\22\3\1\261"+
    "\14\3\1\262\7\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\23\3\1\263\1\264\7\3\1\265\12\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\22\3"+
    "\1\266\3\3\1\267\20\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\35\3\1\270\11\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\26\3\1\271\2\3"+
    "\1\272\15\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\33\3\1\273\13\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\30\3\1\274\16\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\34\3\1\275\12\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\24\3"+
    "\1\276\1\277\6\3\1\300\12\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\24\3\1\301\21\3\1\302"+
    "\27\0\10\3\2\0\1\303\10\0\1\3\3\0\47\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\22\3"+
    "\1\304\24\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\31\3\1\305\15\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\42\3\1\306\4\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\27\3\1\307\17\3"+
    "\27\0\4\3\1\310\3\3\2\0\1\3\10\0\1\3"+
    "\3\0\25\3\1\311\21\3\27\0\10\3\2\0\1\312"+
    "\10\0\1\3\3\0\47\3\27\0\10\3\2\0\1\313"+
    "\10\0\1\3\3\0\47\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\34\3\1\314\12\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\31\3\1\315\15\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\32\3"+
    "\1\316\14\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\32\3\1\317\14\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\26\3\1\320\20\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\24\3\1\321\22\3"+
    "\126\0\1\322\124\0\1\323\124\0\1\324\124\0\1\325"+
    "\104\0\1\326\46\0\2\221\2\0\1\221\1\0\1\221"+
    "\115\0\10\3\2\0\1\327\10\0\1\3\3\0\47\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\22\3"+
    "\1\330\24\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\25\3\1\331\21\3\30\0\1\226\1\227\2\0"+
    "\1\226\1\0\1\226\1\0\1\230\1\73\25\0\1\73"+
    "\65\0\2\227\2\0\1\227\1\0\1\227\1\0\1\230"+
    "\1\73\25\0\1\73\65\0\2\332\2\0\1\332\1\0"+
    "\1\332\115\0\10\3\2\0\1\333\10\0\1\3\3\0"+
    "\47\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\26\3\1\334\20\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\24\3\1\335\22\3\27\0\4\3\1\336"+
    "\3\3\2\0\1\3\10\0\1\3\3\0\31\3\1\337"+
    "\2\3\1\340\1\3\1\341\3\3\1\342\4\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\23\3\1\343"+
    "\23\3\27\0\10\3\2\0\1\344\10\0\1\3\3\0"+
    "\47\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\24\3\1\345\22\3\26\0\15\114\1\346\1\114\1\241"+
    "\105\114\1\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\22\3\1\347\24\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\3\3\1\350\43\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\13\3\1\351\33\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\7\3\1\352"+
    "\37\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\2\3\1\351\44\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\13\3\1\353\33\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\16\3\1\354\30\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\3\3\1\355"+
    "\43\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\14\3\1\356\32\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\22\3\1\357\24\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\24\3\1\360\22\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\24\3\1\361"+
    "\22\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\26\3\1\362\20\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\31\3\1\363\15\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\23\3\1\364\23\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\25\3\1\365"+
    "\21\3\27\0\10\3\2\0\1\366\10\0\1\3\3\0"+
    "\47\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\34\3\1\367\12\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\35\3\1\370\11\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\24\3\1\371\7\3\1\372"+
    "\12\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\24\3\1\373\22\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\35\3\1\374\5\3\1\375\3\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\23\3\1\376"+
    "\23\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\23\3\1\377\23\3\27\0\10\3\2\0\1\u0100\10\0"+
    "\1\3\3\0\47\3\27\0\10\3\2\0\1\u0101\10\0"+
    "\1\3\3\0\47\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\23\3\1\u0102\23\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\24\3\1\u0103\22\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\41\3\1\u0104"+
    "\5\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\41\3\1\u0105\5\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\22\3\1\u0106\24\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\24\3\1\u0107\22\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\24\3\1\u0108"+
    "\22\3\27\0\10\3\2\0\1\u0109\10\0\1\3\3\0"+
    "\47\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\22\3\1\u010a\24\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\23\3\1\u010b\23\3\27\0\10\3\2\0"+
    "\1\u010c\10\0\1\3\3\0\47\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\23\3\1\u010d\23\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\33\3\1\u010e"+
    "\13\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\26\3\1\u010f\20\3\77\0\1\u0110\54\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\22\3\1\u0111\24\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\23\3\1\u0112"+
    "\23\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\24\3\1\u0113\22\3\30\0\2\332\2\0\1\332\1\0"+
    "\1\332\2\0\1\73\25\0\1\73\64\0\10\3\2\0"+
    "\1\3\5\0\1\u0114\2\0\1\3\3\0\31\3\1\u0115"+
    "\15\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\37\3\1\u0116\7\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\26\3\1\u0117\20\3\27\0\4\3\1\u0118"+
    "\3\3\2\0\1\3\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\42\3\1\u0119"+
    "\4\3\27\0\10\3\2\0\1\u011a\10\0\1\3\3\0"+
    "\47\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\21\3\1\u011b\25\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\35\3\1\u011c\11\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\23\3\1\u011d\23\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\4\3\1\u011e"+
    "\42\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\11\3\1\352\35\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\1\u011f\46\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\1\3\1\u0120\45\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\11\3\1\u0121\35\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\6\3"+
    "\1\u0122\40\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\17\3\1\u0123\27\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\37\3\1\u0124\7\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\32\3\1\u0125\14\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\42\3"+
    "\1\u0126\4\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\24\3\1\u0127\22\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\22\3\1\u0128\24\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\21\3\1\u0129\25\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\34\3"+
    "\1\u012a\12\3\27\0\10\3\2\0\1\u012b\10\0\1\3"+
    "\3\0\47\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\31\3\1\u012c\15\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\24\3\1\u012d\22\3\27\0\10\3"+
    "\2\0\1\u012e\10\0\1\3\3\0\47\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\24\3\1\u012f\22\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\22\3"+
    "\1\u0130\24\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\31\3\1\u0131\15\3\27\0\10\3\2\0\1\u0132"+
    "\10\0\1\3\3\0\47\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\24\3\1\u0133\22\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\32\3\1\u0134\14\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\41\3"+
    "\1\u0135\5\3\27\0\10\3\2\0\1\u0136\10\0\1\3"+
    "\3\0\22\3\1\u0137\24\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\32\3\1\u0138\14\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\31\3\1\u0139\15\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\40\3"+
    "\1\u013a\6\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\31\3\1\u013b\15\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\25\3\1\u013c\21\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\34\3\1\u013d\12\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\41\3"+
    "\1\u013e\5\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\22\3\1\u013f\24\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\24\3\1\u0140\22\3\27\0\10\3"+
    "\2\0\1\u0141\10\0\1\3\3\0\47\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\22\3\1\u0142\24\3"+
    "\106\0\1\u0143\45\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\25\3\1\u0144\21\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\31\3\1\u0145\15\3\107\0\1\u0146"+
    "\44\0\4\3\1\u0147\3\3\2\0\1\3\10\0\1\3"+
    "\3\0\47\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\32\3\1\u0148\14\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\31\3\1\u0149\15\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\25\3\1\u014a\21\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\31\3"+
    "\1\u014b\15\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\36\3\1\u014c\10\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\24\3\1\u014d\22\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\4\3\1\352\42\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\47\3"+
    "\1\0\1\u014e\25\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\14\3\1\u014f\32\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\4\3\1\u0150\42\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\14\3\1\352\32\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\15\3"+
    "\1\u0151\31\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\22\3\1\u0152\24\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\33\3\1\u0153\13\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\35\3\1\u0154\11\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\25\3"+
    "\1\u0155\21\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\24\3\1\u0156\22\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\25\3\1\u0157\21\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\27\3\1\u0158\17\3"+
    "\27\0\4\3\1\u0159\3\3\2\0\1\3\10\0\1\3"+
    "\3\0\47\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\36\3\1\u015a\10\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\22\3\1\u015b\24\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\35\3\1\u015c\11\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\35\3"+
    "\1\u015d\11\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\32\3\1\u015e\14\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\25\3\1\u015f\21\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\21\3\1\u0160\25\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\30\3"+
    "\1\u0161\16\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\23\3\1\u0162\23\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\32\3\1\u0163\14\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\23\3\1\u0164\23\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\21\3"+
    "\1\u0165\25\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\26\3\1\u0166\20\3\33\0\1\u0167\120\0\10\3"+
    "\2\0\1\u0168\10\0\1\3\3\0\47\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\24\3\1\u0169\22\3"+
    "\27\0\10\3\2\0\1\3\10\0\1\3\3\0\23\3"+
    "\1\u016a\23\3\27\0\10\3\2\0\1\3\10\0\1\3"+
    "\3\0\23\3\1\u016b\23\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\34\3\1\u016c\12\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\1\u016d\46\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\6\3\1\u016e"+
    "\40\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\20\3\1\u016f\26\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\5\3\1\352\41\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\25\3\1\u0170\21\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\23\3\1\u0171"+
    "\23\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\41\3\1\u0172\5\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\24\3\1\u0173\22\3\27\0\10\3\2\0"+
    "\1\u0174\10\0\1\3\3\0\47\3\27\0\10\3\2\0"+
    "\1\u0175\10\0\1\3\3\0\47\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\22\3\1\u0176\24\3\27\0"+
    "\10\3\2\0\1\u0177\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\36\3\1\u0178"+
    "\10\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\25\3\1\u0179\21\3\27\0\10\3\2\0\1\u017a\10\0"+
    "\1\3\3\0\47\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\22\3\1\u017b\24\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\24\3\1\u017c\22\3\27\0"+
    "\10\3\2\0\1\u017d\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\35\3\1\u017e"+
    "\11\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\22\3\1\u017f\24\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\25\3\1\u0180\21\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\22\3\1\u0181\24\3\27\0"+
    "\10\3\2\0\1\u0182\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\25\3\1\u0183"+
    "\21\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\15\3\1\u0184\31\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\3\3\1\u0185\43\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\24\3\1\u0186\22\3\27\0"+
    "\10\3\2\0\1\u0187\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\u0188\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\u0189\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\35\3\1\u018a"+
    "\11\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\25\3\1\u018b\21\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\1\u018c\46\3\27\0\10\3\2\0\1\3"+
    "\10\0\1\3\3\0\26\3\1\u018d\20\3\27\0\10\3"+
    "\2\0\1\u018e\10\0\1\3\3\0\47\3\27\0\10\3"+
    "\2\0\1\3\10\0\1\3\3\0\1\u018f\46\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\25\3\1\u0190"+
    "\21\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\25\3\1\u0191\21\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\21\3\1\u0192\25\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\32\3\1\u0193\14\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\26\3\1\u0194"+
    "\20\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\13\3\1\352\33\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\1\3\1\351\45\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\36\3\1\u0195\10\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\24\3\1\u0196"+
    "\22\3\27\0\10\3\2\0\1\u0197\10\0\1\3\3\0"+
    "\47\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\26\3\1\u0198\20\3\27\0\4\3\1\u0199\3\3\2\0"+
    "\1\3\10\0\1\3\3\0\47\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\26\3\1\u019a\20\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\26\3\1\u019b"+
    "\20\3\27\0\10\3\2\0\1\u019c\10\0\1\3\3\0"+
    "\47\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\21\3\1\u019d\25\3\27\0\10\3\2\0\1\u019e\10\0"+
    "\1\3\3\0\47\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\27\3\1\u019f\17\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\34\3\1\u01a0\12\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\35\3\1\u01a1"+
    "\11\3\27\0\4\3\1\u01a2\3\3\2\0\1\3\10\0"+
    "\1\3\3\0\47\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\35\3\1\u01a3\11\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\30\3\1\u01a4\16\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\25\3\1\u01a5"+
    "\21\3\27\0\10\3\2\0\1\3\10\0\1\3\3\0"+
    "\25\3\1\u01a6\21\3\27\0\10\3\2\0\1\3\10\0"+
    "\1\3\3\0\31\3\1\u01a7\15\3\27\0\10\3\2\0"+
    "\1\u01a8\10\0\1\3\3\0\47\3\27\0\10\3\2\0"+
    "\1\u01a9\10\0\1\3\3\0\47\3\27\0\10\3\2\0"+
    "\1\3\10\0\1\3\3\0\23\3\1\u01aa\23\3\27\0"+
    "\10\3\2\0\1\u01ab\10\0\1\3\3\0\47\3\27\0"+
    "\10\3\2\0\1\3\10\0\1\3\3\0\32\3\1\u01ac"+
    "\14\3\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\37\1\13\11\1\1\2\0"+
    "\1\1\1\0\6\1\1\0\1\11\1\0\1\11\6\1"+
    "\1\0\1\11\1\1\1\11\1\0\1\11\1\0\52\1"+
    "\1\11\1\1\2\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\0\7\11\3\1\1\0\4\1\3\0\7\1\1\0"+
    "\1\11\57\1\4\11\1\0\3\1\1\0\65\1\1\0"+
    "\3\1\1\0\56\1\1\11\2\1\1\0\7\1\1\11"+
    "\30\1\1\11\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String token; 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PHPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { token = yytext(); return ERROR;
            }
          case 128: break;
          case 2: 
            { token = yytext(); return ID;
            }
          case 129: break;
          case 3: 
            { token = yytext(); return NUMBER;
            }
          case 130: break;
          case 4: 
            { token = yytext(); return MINUS;
            }
          case 131: break;
          case 5: 
            { token = yytext(); return DOT;
            }
          case 132: break;
          case 6: 
            { token = yytext(); return COMMENT;
            }
          case 133: break;
          case 7: 
            { token = yytext(); return DIV;
            }
          case 134: break;
          case 8: 
            { /*Nothing jaja*/
            }
          case 135: break;
          case 9: 
            { token = yytext(); return MULT;
            }
          case 136: break;
          case 10: 
            { token = yytext(); return COLON;
            }
          case 137: break;
          case 11: 
            { token = yytext(); return ASSING;
            }
          case 138: break;
          case 12: 
            { token = yytext(); return GREATER;
            }
          case 139: break;
          case 13: 
            { token = yytext(); return PLUS;
            }
          case 140: break;
          case 14: 
            { token = yytext(); return NOT;
            }
          case 141: break;
          case 15: 
            { token = yytext(); return LESS;
            }
          case 142: break;
          case 16: 
            { token = yytext(); return MOD;
            }
          case 143: break;
          case 17: 
            { token = yytext(); return BIT_AND;
            }
          case 144: break;
          case 18: 
            { token = yytext(); return BIT_OR;
            }
          case 145: break;
          case 19: 
            { token = yytext(); return BIT_XOR;
            }
          case 146: break;
          case 20: 
            { token = yytext(); return SEMICOLON;
            }
          case 147: break;
          case 21: 
            { token = yytext(); return COMMA;
            }
          case 148: break;
          case 22: 
            { token = yytext(); return RECT_OPEN_BRACE;
            }
          case 149: break;
          case 23: 
            { token = yytext(); return RECT_CLOSE_BRACE;
            }
          case 150: break;
          case 24: 
            { token = yytext(); return OPEN_BRACE;
            }
          case 151: break;
          case 25: 
            { token = yytext(); return CLOSE_BRACE;
            }
          case 152: break;
          case 26: 
            { token = yytext(); return OPEN_CURLY_BRACE;
            }
          case 153: break;
          case 27: 
            { token = yytext(); return CLOSE_CURLY_BRACE;
            }
          case 154: break;
          case 28: 
            { token = yytext(); return BIT_NOT;
            }
          case 155: break;
          case 29: 
            { token = yytext(); return DOLLAR;
            }
          case 156: break;
          case 30: 
            { token = yytext(); return AT;
            }
          case 157: break;
          case 31: 
            { token = yytext(); return REAL_NUM;
            }
          case 158: break;
          case 32: 
            { token = yytext(); return DECR;
            }
          case 159: break;
          case 33: 
            { token = yytext(); return MINUS_EQUAL;
            }
          case 160: break;
          case 34: 
            { token = yytext(); return CONCAT_EQUAL;
            }
          case 161: break;
          case 35: 
            { token = yytext();return DIV_EQUAL;
            }
          case 162: break;
          case 36: 
            { token = yytext(); return POW;
            }
          case 163: break;
          case 37: 
            { token = yytext(); return MULT_EQUAL;
            }
          case 164: break;
          case 38: 
            { token = yytext(); return STRING;
            }
          case 165: break;
          case 39: 
            { token = yytext(); return AS;
            }
          case 166: break;
          case 40: 
            { token = yytext();return OR;
            }
          case 167: break;
          case 41: 
            { token = yytext(); return IF;
            }
          case 168: break;
          case 42: 
            { token = yytext(); return DO;
            }
          case 169: break;
          case 43: 
            { token = yytext(); return DOUBLE_COLON;
            }
          case 170: break;
          case 44: 
            { token = yytext(); return EQUAL;
            }
          case 171: break;
          case 45: 
            { token = yytext(); return ARROW;
            }
          case 172: break;
          case 46: 
            { token = yytext(); return GREATER_EQUAL;
            }
          case 173: break;
          case 47: 
            { token = yytext(); return SR;
            }
          case 174: break;
          case 48: 
            { token = yytext(); return PLUSS_EQUAL;
            }
          case 175: break;
          case 49: 
            { token = yytext(); return INCR;
            }
          case 176: break;
          case 50: 
            { token = yytext(); return NOT_EQUAL;
            }
          case 177: break;
          case 51: 
            { token = yytext(); return LESS_EQUAL;
            }
          case 178: break;
          case 52: 
            { token = yytext();return SL;
            }
          case 179: break;
          case 53: 
            { token = yytext(); return MOD_EQUAL;
            }
          case 180: break;
          case 54: 
            { token = yytext(); return AND_EQUAL;
            }
          case 181: break;
          case 55: 
            { token = yytext(); return SYM_AND;
            }
          case 182: break;
          case 56: 
            { token = yytext(); return OR_EQUAL;
            }
          case 183: break;
          case 57: 
            { token = yytext(); return SYM_OR;
            }
          case 184: break;
          case 58: 
            { token = yytext(); return XOR_EQUAL;
            }
          case 185: break;
          case 59: 
            { token = yytext();return CLOSE;
            }
          case 186: break;
          case 60: 
            { token = yytext(); return FOR;
            }
          case 187: break;
          case 61: 
            { token = yytext(); return POW_EQUAL;
            }
          case 188: break;
          case 62: 
            { token = yytext(); return AND;
            }
          case 189: break;
          case 63: 
            { token = yytext();return TRY;
            }
          case 190: break;
          case 64: 
            { token = yytext(); return NEW;
            }
          case 191: break;
          case 65: 
            { token = yytext(); return DIE;
            }
          case 192: break;
          case 66: 
            { token = yytext(); return USE;
            }
          case 193: break;
          case 67: 
            { token = yytext(); return VAR;
            }
          case 194: break;
          case 68: 
            { token = yytext(); return XOR;
            }
          case 195: break;
          case 69: 
            { token = yytext(); return IDENTICAL;
            }
          case 196: break;
          case 70: 
            { token = yytext(); return SR_EQUAL;
            }
          case 197: break;
          case 71: 
            { token = yytext(); return NOT_IDENTICAL;
            }
          case 198: break;
          case 72: 
            { token = yytext(); return SL_EQUAL;
            }
          case 199: break;
          case 73: 
            { token = yytext(); return ELSE;
            }
          case 200: break;
          case 74: 
            { token = yytext(); return ECHO;
            }
          case 201: break;
          case 75: 
            { token = yytext(); return EVAL;
            }
          case 202: break;
          case 76: 
            { token = yytext(); return EXIT;
            }
          case 203: break;
          case 77: 
            { token = yytext(); return LIST;
            }
          case 204: break;
          case 78: 
            { token = yytext(); return CASE;
            }
          case 205: break;
          case 79: 
            { token = yytext(); return GOTO;
            }
          case 206: break;
          case 80: 
            { token = yytext(); return FINAL;
            }
          case 207: break;
          case 81: 
            { token = yytext(); return EMPTY;
            }
          case 208: break;
          case 82: 
            { token = yytext(); return ENDIF;
            }
          case 209: break;
          case 83: 
            { token = yytext(); return ARRAY;
            }
          case 210: break;
          case 84: 
            { token = yytext(); return THROW;
            }
          case 211: break;
          case 85: 
            { token = yytext(); return TRAIT;
            }
          case 212: break;
          case 86: 
            { token = yytext(); return CATCH;
            }
          case 213: break;
          case 87: 
            { token = yytext(); return CLASS;
            }
          case 214: break;
          case 88: 
            { token = yytext(); return CLONE;
            }
          case 215: break;
          case 89: 
            { token = yytext();return CONST;
            }
          case 216: break;
          case 90: 
            { token = yytext(); return PRINT;
            }
          case 217: break;
          case 91: 
            { token = yytext(); return ISSET;
            }
          case 218: break;
          case 92: 
            { token = yytext(); return BREAK;
            }
          case 219: break;
          case 93: 
            { token = yytext(); return UNSET;
            }
          case 220: break;
          case 94: 
            { token = yytext(); return WHILE;
            }
          case 221: break;
          case 95: 
            { token = yytext(); return INI;
            }
          case 222: break;
          case 96: 
            { token = yytext(); return ELSEIF;
            }
          case 223: break;
          case 97: 
            { token = yytext(); return ENDFOR;
            }
          case 224: break;
          case 98: 
            { token = yytext(); return C_CONSTANT;
            }
          case 225: break;
          case 99: 
            { token = yytext(); return PUBLIC;
            }
          case 226: break;
          case 100: 
            { token = yytext(); return RETURN;
            }
          case 227: break;
          case 101: 
            { token = yytext(); return STATIC;
            }
          case 228: break;
          case 102: 
            { token = yytext(); return SWITCH;
            }
          case 229: break;
          case 103: 
            { token = yytext(); return GLOBAL;
            }
          case 230: break;
          case 104: 
            { token = yytext(); return FOREACH;
            }
          case 231: break;
          case 105: 
            { token = yytext(); return EXTENDS;
            }
          case 232: break;
          case 106: 
            { token = yytext(); return PRIVATE;
            }
          case 233: break;
          case 107: 
            { token = yytext(); return INCLUDE;
            }
          case 234: break;
          case 108: 
            { token = yytext(); return REQUIRE;
            }
          case 235: break;
          case 109: 
            { token = yytext(); return DEFAULT;
            }
          case 236: break;
          case 110: 
            { token = yytext(); return DECLARE;
            }
          case 237: break;
          case 111: 
            { token = yytext(); return FUNCTION;
            }
          case 238: break;
          case 112: 
            { token = yytext(); return ENDWHILE;
            }
          case 239: break;
          case 113: 
            { token = yytext(); return ABSTRACT;
            }
          case 240: break;
          case 114: 
            { token = yytext(); return CALLABLE;
            }
          case 241: break;
          case 115: 
            { token = yytext(); return CONTINUE;
            }
          case 242: break;
          case 116: 
            { token = yytext(); return ENDSWITCH;
            }
          case 243: break;
          case 117: 
            { token = yytext(); return PROTECTED;
            }
          case 244: break;
          case 118: 
            { token = yytext(); return INTERFACE;
            }
          case 245: break;
          case 119: 
            { token = yytext(); return INSTEADOF;
            }
          case 246: break;
          case 120: 
            { token = yytext(); return NAMESPACE;
            }
          case 247: break;
          case 121: 
            { token = yytext(); return ENDFOREACH;
            }
          case 248: break;
          case 122: 
            { token = yytext(); return ENDDECLARE;
            }
          case 249: break;
          case 123: 
            { token = yytext(); return IMPLEMENTS;
            }
          case 250: break;
          case 124: 
            { token = yytext(); return INSTANCEOF;
            }
          case 251: break;
          case 125: 
            { token = yytext(); return INCLUDE_ONCE;
            }
          case 252: break;
          case 126: 
            { token = yytext(); return REQUIRE_ONCE;
            }
          case 253: break;
          case 127: 
            { token = yytext(); return HALT_COMPILER;
            }
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
