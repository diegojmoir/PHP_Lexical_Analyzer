/* The following code was generated by JFlex 1.6.1 */


package analizador_lexico;
/*you shoukd import your enum file with all the symbols */ 
import static analizador_lexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Diego PÃ©rez Moir/Desktop/U/Quinto Cinclo/Lenguajes Formales y Automatas/Analizador Lexico/src/analizador_lexico/PHP.flex</tt>
 */
class PHPLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\30\1\33\1\33\1\30\22\0\1\63\1\74\1\36"+
    "\1\32\1\113\1\76\1\77\1\0\1\106\1\107\1\31\1\73\1\103"+
    "\1\4\1\25\1\27\1\2\1\2\6\2\2\2\1\70\1\102\1\75"+
    "\1\71\1\72\1\115\1\114\1\43\1\1\1\41\1\44\1\26\1\47"+
    "\1\1\1\55\1\45\2\1\1\42\1\54\1\51\1\53\1\56\1\1"+
    "\1\46\1\14\1\52\1\50\2\1\1\1\2\1\1\104\1\37\1\105"+
    "\1\101\1\40\1\0\1\12\1\21\1\7\1\5\1\6\1\3\1\66"+
    "\1\15\1\10\1\1\1\61\1\13\1\11\1\22\1\17\1\57\1\67"+
    "\1\23\1\60\1\20\1\62\1\65\1\64\1\16\1\24\1\1\1\110"+
    "\1\100\1\111\1\112\6\1\1\34\172\1\u1f28\0\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\15\1\1\3\1\4\1\0\1\5"+
    "\1\6\11\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1"+
    "\1\34\1\0\1\35\3\6\1\0\1\36\5\0\1\37"+
    "\1\0\2\6\1\40\11\6\1\41\6\6\1\42\4\6"+
    "\1\43\7\6\1\44\2\0\1\45\1\46\1\47\1\50"+
    "\3\0\22\6\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\0\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\35\1\0\1\6\1\72"+
    "\1\6\6\0\2\6\1\73\23\6\1\74\3\6\1\75"+
    "\3\6\1\76\2\6\1\77\3\6\2\0\1\100\1\101"+
    "\1\0\17\6\1\102\1\6\1\103\2\6\1\104\1\105"+
    "\1\106\1\107\1\0\3\6\5\0\3\6\1\110\1\6"+
    "\1\111\1\112\6\6\1\113\2\6\1\114\13\6\1\115"+
    "\1\34\10\6\1\116\1\0\1\101\21\6\1\117\1\0"+
    "\1\120\2\6\1\0\1\34\2\0\3\6\1\121\1\6"+
    "\1\0\3\6\1\122\3\6\1\123\1\124\1\125\1\6"+
    "\1\126\5\6\1\127\1\6\1\130\1\131\1\132\1\6"+
    "\1\133\3\6\1\0\7\6\1\134\5\6\1\135\1\136"+
    "\1\6\1\137\2\6\2\0\3\6\1\140\1\0\1\6"+
    "\1\141\14\6\1\142\1\6\1\116\1\6\1\143\5\6"+
    "\1\144\1\145\1\146\1\147\1\150\1\6\1\0\1\151"+
    "\1\6\1\152\1\140\1\153\7\6\1\154\5\6\1\155"+
    "\3\6\1\156\1\6\1\157\1\0\3\6\1\160\1\161"+
    "\1\162\5\6\1\163\10\6\1\164\2\6\1\165\1\166"+
    "\1\6\1\167\2\6\1\170\1\171\1\172\1\173\1\6"+
    "\1\174\5\6\1\175\1\176\3\6\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\234"+
    "\0\u0666\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46"+
    "\0\u0b94\0\u0be2\0\u0c30\0\116\0\116\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\116\0\116\0\116\0\u0c7e\0\352"+
    "\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u0eee"+
    "\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026\0\116\0\u0ea0\0\u1074\0\u10c2"+
    "\0\234\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u12e4"+
    "\0\u1332\0\u1380\0\234\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506"+
    "\0\u1554\0\234\0\u15a2\0\u15f0\0\u163e\0\u168c\0\234\0\u16da"+
    "\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\116\0\u18fc"+
    "\0\u194a\0\116\0\116\0\u1998\0\116\0\u0702\0\u19e6\0\u1a34"+
    "\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4"+
    "\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14"+
    "\0\u1f62\0\u1fb0\0\116\0\u1ffe\0\116\0\116\0\u204c\0\116"+
    "\0\u0ea0\0\u209a\0\116\0\u20e8\0\u2136\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\116\0\u2184\0\u2184\0\u21d2\0\u2220"+
    "\0\u226e\0\u0d1a\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442"+
    "\0\u2490\0\234\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664"+
    "\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4"+
    "\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\234\0\u2aa8\0\u2af6"+
    "\0\u2b44\0\234\0\u2b92\0\u2be0\0\u2c2e\0\234\0\u2c7c\0\u2cca"+
    "\0\234\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\116\0\116"+
    "\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0"+
    "\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u3330"+
    "\0\234\0\u337e\0\234\0\u33cc\0\u341a\0\116\0\116\0\116"+
    "\0\116\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c"+
    "\0\u368a\0\u36d8\0\u3726\0\u3774\0\u37c2\0\234\0\u3810\0\u385e"+
    "\0\234\0\u38ac\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u3a32\0\234"+
    "\0\u3a80\0\u3ace\0\234\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54"+
    "\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\234\0\234"+
    "\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u4098"+
    "\0\u2e02\0\u40e6\0\u0702\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c"+
    "\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e\0\u44dc"+
    "\0\u452a\0\u4578\0\u45c6\0\u4614\0\234\0\u4662\0\234\0\u46b0"+
    "\0\u46fe\0\u474c\0\116\0\u479a\0\u47e8\0\u4836\0\u4884\0\u48d2"+
    "\0\234\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\234\0\u4aa6"+
    "\0\u4af4\0\u4b42\0\234\0\234\0\234\0\u4b90\0\234\0\u4bde"+
    "\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\234\0\u4d64\0\234\0\234"+
    "\0\234\0\u4db2\0\234\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38"+
    "\0\u4f86\0\u4fd4\0\u5022\0\u5070\0\u50be\0\u510c\0\234\0\u515a"+
    "\0\u51a8\0\u51f6\0\u5244\0\u5292\0\234\0\234\0\u52e0\0\116"+
    "\0\u532e\0\u537c\0\u53ca\0\u5418\0\u5466\0\u54b4\0\u5502\0\234"+
    "\0\u5550\0\u559e\0\u55ec\0\u563a\0\u5688\0\u56d6\0\u5724\0\u5772"+
    "\0\u57c0\0\u580e\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994\0\234"+
    "\0\u59e2\0\u4eea\0\u5a30\0\116\0\u5a7e\0\u5acc\0\u5b1a\0\u5b68"+
    "\0\u5bb6\0\234\0\234\0\234\0\234\0\234\0\u5c04\0\u5c52"+
    "\0\234\0\u5ca0\0\234\0\116\0\234\0\u5cee\0\u5d3c\0\u5d8a"+
    "\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2\0\u5f10\0\u5f5e\0\u5fac\0\u5ffa"+
    "\0\u6048\0\u6096\0\u60e4\0\u6132\0\u6180\0\u61ce\0\234\0\u621c"+
    "\0\234\0\u626a\0\u62b8\0\u6306\0\u6354\0\234\0\234\0\234"+
    "\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da\0\234\0\u6528\0\u6576"+
    "\0\u65c4\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u674a\0\234\0\u6798"+
    "\0\u67e6\0\234\0\234\0\u6834\0\234\0\u6882\0\u68d0\0\234"+
    "\0\234\0\234\0\234\0\u691e\0\234\0\u696c\0\u69ba\0\u6a08"+
    "\0\u6a56\0\u6aa4\0\234\0\234\0\u6af2\0\u6b40\0\u6b8e\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\3\1\24\1\3\1\25"+
    "\1\26\1\27\1\2\1\0\1\30\1\31\1\32\1\2"+
    "\1\33\16\3\1\34\1\35\1\3\1\36\1\31\1\37"+
    "\1\40\1\41\1\3\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\117\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\30\0\1\70\3\0"+
    "\1\71\16\0\1\72\1\71\70\0\3\30\1\0\3\30"+
    "\1\73\6\30\1\74\5\30\1\0\1\30\5\0\1\30"+
    "\3\0\22\30\1\75\1\0\4\30\30\0\1\76\1\0"+
    "\1\77\1\100\7\0\1\101\1\0\1\102\1\0\1\103"+
    "\3\0\1\104\43\0\1\105\1\0\1\106\23\0\3\30"+
    "\1\0\1\30\1\107\1\30\1\110\6\30\1\111\5\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\2\30\1\112\1\30\1\113\1\30"+
    "\1\114\2\30\1\115\3\30\1\116\2\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\1\30\1\117\2\30"+
    "\27\0\3\30\1\0\5\30\1\120\1\121\3\30\1\122"+
    "\5\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\2\30\1\123\1\0\4\30\1\124\10\30"+
    "\1\125\2\30\1\0\1\30\5\0\1\30\3\0\20\30"+
    "\1\126\2\30\1\0\4\30\27\0\3\30\1\0\14\30"+
    "\1\127\1\130\1\131\1\30\1\0\1\30\5\0\1\30"+
    "\3\0\20\30\1\132\2\30\1\0\4\30\27\0\3\30"+
    "\1\0\3\30\1\133\14\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\1\30"+
    "\1\134\16\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\12\30\1\135\5\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\2\30\1\136\13\30\1\137\1\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\10\30\1\140\5\30\1\141\1\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\3\30\1\142\12\30\1\143\1\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\144\3\30\1\145\12\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\146\16\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\30\0\1\72"+
    "\66\0\1\147\53\0\1\150\1\0\1\151\37\0\1\152"+
    "\54\0\1\26\4\0\1\26\25\0\1\26\5\0\1\153"+
    "\55\0\1\154\37\0\1\155\24\0\30\156\1\0\2\156"+
    "\2\0\1\156\1\157\1\160\56\156\1\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\1\161\1\162"+
    "\1\163\1\30\1\164\2\30\1\165\1\30\1\166\1\167"+
    "\1\30\1\170\6\30\1\0\4\30\27\0\3\30\1\0"+
    "\16\30\1\171\1\30\1\0\1\30\5\0\1\30\3\0"+
    "\22\30\1\172\1\0\4\30\27\0\3\30\1\0\13\30"+
    "\1\173\4\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\1\174\3\30\27\0\3\30\1\0\15\30\1\175"+
    "\2\30\1\0\1\30\5\0\1\30\3\0\20\30\1\176"+
    "\2\30\1\0\4\30\27\0\3\30\1\0\10\30\1\177"+
    "\7\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\5\30\1\200\12\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\6\30\1\201\3\30\1\202\5\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\116\0"+
    "\1\203\116\0\1\204\1\205\114\0\1\206\1\207\25\0"+
    "\1\76\1\0\1\106\1\100\7\0\1\101\1\0\1\102"+
    "\1\0\1\103\3\0\1\104\43\0\1\210\1\0\1\211"+
    "\113\0\1\212\115\0\1\213\3\0\1\214\17\0\1\215"+
    "\71\0\1\216\115\0\1\217\5\0\1\220\107\0\1\221"+
    "\6\0\1\222\106\0\1\223\116\0\1\224\25\0\1\225"+
    "\1\0\1\226\66\0\1\226\24\0\1\72\3\0\1\71"+
    "\17\0\1\71\70\0\3\30\1\0\15\30\1\227\2\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\16\30\1\230\1\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\15\30\1\231\2\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\30\0\1\76\3\0\1\71"+
    "\16\0\1\232\1\71\71\0\1\106\22\0\1\233\76\0"+
    "\1\234\115\0\1\235\116\0\1\236\116\0\1\237\107\0"+
    "\1\72\114\0\2\30\1\240\1\0\2\30\1\241\15\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\242\16\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\10\30\1\243\7\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\20\30"+
    "\1\0\1\30\5\0\1\30\3\0\17\30\1\244\3\30"+
    "\1\0\4\30\27\0\3\30\1\0\20\30\1\0\1\30"+
    "\5\0\1\30\3\0\20\30\1\245\2\30\1\0\4\30"+
    "\27\0\3\30\1\0\3\30\1\246\7\30\1\247\4\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\250\17\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\5\30\1\251\12\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\6\30\1\252"+
    "\4\30\1\253\4\30\1\0\1\30\5\0\1\30\3\0"+
    "\20\30\1\254\2\30\1\0\4\30\27\0\3\30\1\0"+
    "\5\30\1\255\4\30\1\256\5\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\15\30\1\257\2\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\17\30\1\260\3\30\1\0"+
    "\4\30\27\0\3\30\1\0\2\30\1\261\10\30\1\262"+
    "\4\30\1\0\1\30\5\0\1\30\3\0\20\30\1\263"+
    "\2\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\20\30\1\264\2\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\20\30\1\265\2\30\1\0\4\30\27\0"+
    "\3\30\1\0\1\266\17\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\16\30"+
    "\1\267\1\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\20\30\1\0\1\30"+
    "\5\0\1\30\3\0\20\30\1\270\2\30\1\0\4\30"+
    "\27\0\3\30\1\0\11\30\1\271\6\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\16\30\1\272\1\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\13\30"+
    "\1\273\4\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\16\30\1\274\1\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\5\30\1\275\11\30\1\276\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\15\30\1\277\2\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\1\30\1\300\16\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\1\301\3\30"+
    "\27\0\3\30\1\0\4\30\1\302\13\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\13\30\1\303\4\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\3\30\1\304\26\0\30\150\1\0"+
    "\1\150\1\305\63\150\31\151\1\306\64\151\71\0\1\307"+
    "\115\0\1\310\24\0\30\156\1\0\2\156\2\0\1\156"+
    "\1\311\1\160\56\156\1\0\3\30\1\0\10\30\1\312"+
    "\7\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\2\30\1\313\20\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\5\30\1\314\15\30\1\0\4\30\27\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\5\30\1\315"+
    "\15\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\5\30\1\316\2\30\1\317"+
    "\12\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\3\30\1\320\17\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\6\30\1\321\14\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\322\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\3\30\1\323"+
    "\6\30\1\324\5\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\14\30\1\325"+
    "\3\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\5\30\1\326\12\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\3\30\1\327\14\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\20\30\1\330"+
    "\2\30\1\0\4\30\27\0\3\30\1\0\1\30\1\331"+
    "\16\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\3\30\1\332\14\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\16\30\1\333\1\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\12\30\1\334\5\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\13\30\1\335"+
    "\4\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\117\0\1\336\115\0\1\337\115\0\1\340\115\0"+
    "\1\341\103\0\1\342\40\0\1\225\114\0\3\30\1\0"+
    "\5\30\1\343\12\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\1\30\1\344"+
    "\16\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\2\30\1\345\15\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\30\0"+
    "\1\346\122\0\1\347\124\0\1\350\117\0\1\351\117\0"+
    "\1\352\74\0\3\30\1\0\5\30\1\353\12\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\3\30\1\354\2\30\1\355\11\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\12\30\1\356\5\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\13\30\1\357\4\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\1\30\1\360"+
    "\16\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\13\30\1\361\4\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\1\30\1\362\16\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\2\30\1\363"+
    "\1\0\1\364\2\30\1\365\14\30\1\0\1\30\5\0"+
    "\1\30\3\0\20\30\1\366\2\30\1\0\1\367\3\30"+
    "\27\0\3\30\1\0\6\30\1\370\11\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\6\30\1\371\11\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\2\30"+
    "\1\372\15\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\1\30\1\373\16\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\20\30\1\0\1\30\5\0\1\30"+
    "\3\0\20\30\1\374\2\30\1\0\4\30\27\0\3\30"+
    "\1\0\15\30\1\375\2\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\13\30"+
    "\1\376\4\30\1\0\1\30\5\0\1\30\3\0\20\30"+
    "\1\377\2\30\1\0\4\30\27\0\3\30\1\0\6\30"+
    "\1\u0100\11\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\6\30\1\u0101\11\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\u0102\16\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\13\30\1\u0103\4\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\1\30"+
    "\1\u0104\16\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\13\30\1\u0105\4\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\5\30\1\u0106\12\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\13\30\1\u0107\4\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\5\30"+
    "\1\u0108\12\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\5\30\1\u0109\12\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\12\30\1\u010a\5\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\3\30\1\u010b\14\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\5\30"+
    "\1\u010c\12\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\5\30\1\u010d\12\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\u010e\16\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\20\30\1\0\1\30\5\0\1\30\3\0\22\30"+
    "\1\u010f\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\22\30\1\u0110\1\0\4\30"+
    "\26\0\30\u0111\1\0\2\u0111\2\150\61\u0111\27\151\1\u0112"+
    "\1\151\1\306\64\151\30\156\1\0\2\156\2\0\1\156"+
    "\1\157\1\160\31\156\1\u0113\24\156\1\0\3\30\1\0"+
    "\5\30\1\u0114\12\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\3\30\1\u0115\17\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\11\30\1\u0116\11\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\6\30\1\u0117\14\30\1\0\4\30\27\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\2\30\1\u0116"+
    "\20\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\11\30\1\u0118\11\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\14\30\1\u0119\6\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\3\30\1\u011a\17\30\1\0\4\30\27\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\12\30\1\u011b"+
    "\10\30\1\0\4\30\27\0\3\30\1\0\15\30\1\u011c"+
    "\2\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\1\30\1\u011d\2\30\27\0\3\30\1\0\13\30\1\u011e"+
    "\4\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\6\30\1\u011f\11\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\13\30\1\u0120\4\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\13\30\1\u0121\4\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\1\30\1\u0122"+
    "\16\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\6\30\1\u0123\11\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\14\30\1\u0124\3\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\12\30\1\u0125\5\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\43\0\1\u0126\101\0\3\30\1\0"+
    "\6\30\1\u0127\11\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\5\30\1\u0128"+
    "\12\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\13\30\1\u0129\4\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\30\0"+
    "\1\346\3\0\1\71\17\0\1\71\77\0\1\u012a\117\0"+
    "\1\u012b\115\0\1\u012c\115\0\1\u012d\104\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\22\30\1\u012e"+
    "\1\0\4\30\27\0\3\30\1\0\4\30\1\u012f\13\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\5\30\1\u0130\12\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\17\30\1\u0131\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\3\30\1\u0132"+
    "\14\30\1\0\1\30\5\0\1\30\3\0\23\30\1\u0133"+
    "\4\30\27\0\3\30\1\0\15\30\1\u0134\2\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\12\30\1\u0135\5\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\1\30\1\u0136\16\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\2\30\1\u0137\1\0\20\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\20\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\1\u0138\3\30\27\0\3\30\1\0"+
    "\10\30\1\u0139\7\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\5\30\1\u013a"+
    "\12\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\10\30\1\u013b\7\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\20\30\1\u013c\2\30\1\0\4\30\27\0\3\30\1\0"+
    "\1\30\1\u013d\16\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\3\30\1\u013e"+
    "\14\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\13\30\1\u013f\4\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\1\30\1\u0140\16\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\22\30\1\u0141"+
    "\1\0\4\30\27\0\3\30\1\0\16\30\1\u0142\1\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\u0143\3\30\1\u0144\12\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\13\30\1\u0145\4\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\16\30\1\u0146\1\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\17\30"+
    "\1\u0147\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\6\30\1\u0108\11\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\1\u0148\3\30\27\0\3\30\1\0\13\30"+
    "\1\u0149\4\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\16\30\1\u014a\1\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\20\30\1\0\1\30\5\0\1\30"+
    "\3\0\21\30\1\u014b\1\30\1\0\4\30\27\0\3\30"+
    "\1\0\20\30\1\0\1\30\5\0\1\30\3\0\20\30"+
    "\1\u014c\2\30\1\0\4\30\27\0\3\30\1\0\16\30"+
    "\1\u014d\1\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\3\30\1\u014e\14\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\26\0\31\151\1\306\1\u014f\63\151\1\0\3\30\1\0"+
    "\6\30\1\u0150\11\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\7\30\1\u0151"+
    "\10\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\u0117\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\1\u0152\22\30"+
    "\1\0\4\30\27\0\3\30\1\0\20\30\1\0\1\30"+
    "\5\0\1\30\3\0\1\30\1\u0153\21\30\1\0\4\30"+
    "\27\0\3\30\1\0\20\30\1\0\1\u0154\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\20\30"+
    "\1\0\1\30\5\0\1\30\3\0\5\30\1\u0155\15\30"+
    "\1\0\4\30\27\0\3\30\1\0\20\30\1\0\1\30"+
    "\5\0\1\30\3\0\15\30\1\u0156\5\30\1\0\4\30"+
    "\27\0\3\30\1\0\13\30\1\u0157\4\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\5\30\1\u0158\12\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\1\30"+
    "\1\u0159\16\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\3\30\1\u015a\14\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\3\30\1\u015b\14\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\2\30\1\u015c\15\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\13\30"+
    "\1\u015d\4\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\1\30\1\u015e\16\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\5\30\1\u015f\12\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\105\0\1\u0160"+
    "\37\0\3\30\1\0\2\30\1\u0161\15\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\3\30\1\u0162\14\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\37\0\1\u0163\117\0\1\u012b"+
    "\125\0\1\u0164\73\0\3\30\1\0\6\30\1\u0165\11\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\5\30\1\u0166\12\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\16\30\1\u0167\1\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\2\30\1\u0168\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\36\0\1\u0169\106\0\3\30\1\0\1\u016a\17\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\16\30\1\u016b\1\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\2\30\1\u016c\15\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\3\30"+
    "\1\u016d\14\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\3\30\1\u016e\14\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\14\30\1\u016f\3\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\15\30\1\u0170\2\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\4\30"+
    "\1\u0171\13\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\1\u0172\17\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\2\30\1\u0173\1\0\20\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\5\30"+
    "\1\u0174\12\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\15\30\1\u0175\2\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\5\30\1\u0176\12\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\17\30\1\u0108\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\17\30\1\u0177\3\30\1\0"+
    "\4\30\27\0\3\30\1\0\15\30\1\u0178\2\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\16\30\1\u0179\1\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\26\0\30\u017a\1\151"+
    "\2\u017a\2\151\61\u017a\1\0\3\30\1\0\13\30\1\u017b"+
    "\4\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\7\30\1\u0117\10\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\1\0\1\u017c\25\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\12\30\1\u017d"+
    "\10\30\1\0\4\30\27\0\3\30\1\0\7\30\1\u017e"+
    "\10\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\12\30\1\u0117\10\30\1\0\4\30\27\0"+
    "\3\30\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\13\30\1\u017f\7\30\1\0\4\30\27\0\3\30\1\0"+
    "\13\30\1\u0180\4\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\2\30\1\u0181"+
    "\15\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\2\30\1\u0182\15\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\2\30\1\u0183\15\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\10\30\1\u0184\7\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\6\30\1\u0185"+
    "\11\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\10\30\1\u0186\7\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\12\30\1\u0187\5\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\40\0\1\u0188\127\0"+
    "\1\u012b\72\0\3\30\1\0\13\30\1\u0189\4\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\6\30\1\u018a\11\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\1\30\1\u018b\16\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\31\0\1\u018c\113\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\20\30\1\u018d"+
    "\2\30\1\0\4\30\27\0\3\30\1\0\1\30\1\u018e"+
    "\16\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\6\30\1\u018f\11\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\13\30\1\u0190\4\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\6\30\1\u0191\11\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\6\30\1\u0192"+
    "\11\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\22\30\1\u0193\1\0\4\30\27\0\3\30"+
    "\1\0\1\30\1\u0194\16\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\1\30"+
    "\1\u0195\16\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\5\30\1\u0196\12\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\u0197\17\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\2\30\1\u0198\15\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\2\30\1\u0199"+
    "\15\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\5\30\1\u019a\12\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\1\30\1\u019b\16\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\1\u019c\22\30"+
    "\1\0\4\30\27\0\3\30\1\0\20\30\1\0\1\30"+
    "\5\0\1\30\3\0\5\30\1\u019d\15\30\1\0\4\30"+
    "\27\0\3\30\1\0\20\30\1\0\1\30\5\0\1\30"+
    "\3\0\16\30\1\u019e\4\30\1\0\4\30\27\0\3\30"+
    "\1\0\20\30\1\0\1\30\5\0\1\30\3\0\4\30"+
    "\1\u0117\16\30\1\0\4\30\27\0\3\30\1\0\1\30"+
    "\1\u019f\16\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\13\30\1\u01a0\4\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\15\30\1\u01a1\2\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\41\0\1\u01a2"+
    "\103\0\3\30\1\0\7\30\1\u0108\10\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\5\30\1\u01a3\12\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\5\30"+
    "\1\u01a4\12\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\2\30\1\u01a5\15\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\u01a6\16\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\1\30\1\u01a7\16\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\1\30"+
    "\1\u01a8\16\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\15\30\1\u01a9\2\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\20\30\1\0\1\30\5\0\1\30"+
    "\3\0\1\u01aa\22\30\1\0\4\30\27\0\3\30\1\0"+
    "\2\30\1\u01ab\15\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\12\30\1\u01ac"+
    "\5\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\1\30\1\u01ad\16\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\13\30\1\u01ae\4\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\2\30\1\u01af\15\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\1\u01b0\22\30\1\0\4\30"+
    "\27\0\3\30\1\0\2\30\1\u01b1\15\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\20\30\1\0\1\30\5\0\1\30\3\0\13\30"+
    "\1\u01b2\7\30\1\0\4\30\27\0\3\30\1\0\20\30"+
    "\1\0\1\30\5\0\1\30\3\0\3\30\1\u01b3\17\30"+
    "\1\0\4\30\27\0\3\30\1\0\1\30\1\u01b4\16\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\42\0\1\u012b\102\0\3\30\1\0\2\30\1\u01b5\15\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\16\30\1\u01b6\1\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\3\30"+
    "\1\0\10\30\1\u01b7\7\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\13\30"+
    "\1\u01b8\4\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\12\30\1\u01b9\5\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\1\30\1\u01ba\16\30\1\0\1\30"+
    "\5\0\1\30\3\0\23\30\1\0\4\30\27\0\2\30"+
    "\1\u01bb\1\0\20\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\12\30\1\u01bc"+
    "\5\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\1\30\1\u01bd\16\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\12\30\1\u01be\5\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\12\30\1\u01bf\5\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\20\30\1\0"+
    "\1\30\5\0\1\30\3\0\11\30\1\u0117\11\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\1\30\1\u0116\21\30\1\0\4\30\27\0"+
    "\3\30\1\0\1\u01c0\17\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\3\30\1\0\10\30"+
    "\1\u01c1\7\30\1\0\1\30\5\0\1\30\3\0\23\30"+
    "\1\0\4\30\27\0\3\30\1\0\1\30\1\u01c2\16\30"+
    "\1\0\1\30\5\0\1\30\3\0\23\30\1\0\4\30"+
    "\27\0\3\30\1\0\20\30\1\0\1\30\5\0\1\30"+
    "\3\0\20\30\1\u01c3\2\30\1\0\4\30\27\0\3\30"+
    "\1\0\15\30\1\u01c4\2\30\1\0\1\30\5\0\1\30"+
    "\3\0\23\30\1\0\4\30\27\0\2\30\1\u01c5\1\0"+
    "\20\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\15\30\1\u01c6\2\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\4\30\1\u01c7\13\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\2\30\1\u01c8\15\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\2\30\1\u01c9"+
    "\15\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\20\30\1\0\1\30\5\0"+
    "\1\30\3\0\17\30\1\u01ca\3\30\1\0\4\30\27\0"+
    "\3\30\1\0\1\30\1\u01cb\16\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\1\30\1\u01cc\16\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\27\0\3\30\1\0\3\30\1\u01cd"+
    "\14\30\1\0\1\30\5\0\1\30\3\0\23\30\1\0"+
    "\4\30\27\0\3\30\1\0\6\30\1\u01ce\11\30\1\0"+
    "\1\30\5\0\1\30\3\0\23\30\1\0\4\30\27\0"+
    "\3\30\1\0\1\30\1\u01cf\16\30\1\0\1\30\5\0"+
    "\1\30\3\0\23\30\1\0\4\30\27\0\3\30\1\0"+
    "\16\30\1\u01d0\1\30\1\0\1\30\5\0\1\30\3\0"+
    "\23\30\1\0\4\30\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27612];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\1\0\25\1\13\11\2\1\1\0"+
    "\4\1\1\0\1\1\5\0\1\11\1\0\40\1\1\11"+
    "\2\0\2\11\1\1\1\11\3\0\22\1\1\11\1\1"+
    "\2\11\1\1\1\11\2\1\1\11\1\1\1\0\7\11"+
    "\1\1\1\0\3\1\6\0\45\1\2\0\2\11\1\0"+
    "\24\1\4\11\1\0\3\1\5\0\47\1\1\0\23\1"+
    "\1\0\3\1\1\0\1\11\2\0\5\1\1\0\33\1"+
    "\1\0\20\1\1\11\2\1\2\0\4\1\1\0\22\1"+
    "\1\11\13\1\1\0\3\1\1\11\25\1\1\0\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String token; 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PHPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 128: break;
          case 2: 
            { return MINUS;
            }
          case 129: break;
          case 3: 
            { return DOT;
            }
          case 130: break;
          case 4: 
            { return DIV;
            }
          case 131: break;
          case 5: 
            { return MULT;
            }
          case 132: break;
          case 6: 
            { token = yytext(); return ID;
            }
          case 133: break;
          case 7: 
            { return COLON;
            }
          case 134: break;
          case 8: 
            { return ASSING;
            }
          case 135: break;
          case 9: 
            { return GREATER;
            }
          case 136: break;
          case 10: 
            { return PLUS;
            }
          case 137: break;
          case 11: 
            { return NOT;
            }
          case 138: break;
          case 12: 
            { return LESS;
            }
          case 139: break;
          case 13: 
            { return MOD;
            }
          case 140: break;
          case 14: 
            { return BIT_AND;
            }
          case 141: break;
          case 15: 
            { return BIT_OR;
            }
          case 142: break;
          case 16: 
            { return BIT_XOR;
            }
          case 143: break;
          case 17: 
            { return SEMICOLON;
            }
          case 144: break;
          case 18: 
            { return COMMA;
            }
          case 145: break;
          case 19: 
            { return RECT_OPEN_BRACE;
            }
          case 146: break;
          case 20: 
            { return RECT_CLOSE_BRACE;
            }
          case 147: break;
          case 21: 
            { return OPEN_BRACE;
            }
          case 148: break;
          case 22: 
            { return CLOSE_BRACE;
            }
          case 149: break;
          case 23: 
            { return OPEN_CURLY_BRACE;
            }
          case 150: break;
          case 24: 
            { return CLOSE_CURLY_BRACE;
            }
          case 151: break;
          case 25: 
            { return BIT_NOT;
            }
          case 152: break;
          case 26: 
            { return DOLLAR;
            }
          case 153: break;
          case 27: 
            { return AT;
            }
          case 154: break;
          case 28: 
            { token = yytext(); return NUMBER;
            }
          case 155: break;
          case 29: 
            { token = yytext(); return REAL_NUM;
            }
          case 156: break;
          case 30: 
            { return DECR;
            }
          case 157: break;
          case 31: 
            { return MINUS_EQUAL;
            }
          case 158: break;
          case 32: 
            { return DO;
            }
          case 159: break;
          case 33: 
            { return IF;
            }
          case 160: break;
          case 34: 
            { return AS;
            }
          case 161: break;
          case 35: 
            { return OR;
            }
          case 162: break;
          case 36: 
            { return CONCAT_EQUAL;
            }
          case 163: break;
          case 37: 
            { return DIV_EQUAL;
            }
          case 164: break;
          case 38: 
            { /*Nothing jaja*/
            }
          case 165: break;
          case 39: 
            { return POW;
            }
          case 166: break;
          case 40: 
            { return MULT_EQUAL;
            }
          case 167: break;
          case 41: 
            { return DOUBLE_COLON;
            }
          case 168: break;
          case 42: 
            { return EQUAL;
            }
          case 169: break;
          case 43: 
            { return ARROW;
            }
          case 170: break;
          case 44: 
            { return GREATER_EQUAL;
            }
          case 171: break;
          case 45: 
            { return SR;
            }
          case 172: break;
          case 46: 
            { return PLUSS_EQUAL;
            }
          case 173: break;
          case 47: 
            { return INCR;
            }
          case 174: break;
          case 48: 
            { return NOT_EQUAL;
            }
          case 175: break;
          case 49: 
            { return LESS_EQUAL;
            }
          case 176: break;
          case 50: 
            { return SL;
            }
          case 177: break;
          case 51: 
            { return MOD_EQUAL;
            }
          case 178: break;
          case 52: 
            { return AND_EQUAL;
            }
          case 179: break;
          case 53: 
            { return SYM_AND;
            }
          case 180: break;
          case 54: 
            { return OR_EQUAL;
            }
          case 181: break;
          case 55: 
            { return SYM_OR;
            }
          case 182: break;
          case 56: 
            { return XOR_EQUAL;
            }
          case 183: break;
          case 57: 
            { return CLOSE;
            }
          case 184: break;
          case 58: 
            { return FOR;
            }
          case 185: break;
          case 59: 
            { return DIE;
            }
          case 186: break;
          case 60: 
            { return AND;
            }
          case 187: break;
          case 61: 
            { return XOR;
            }
          case 188: break;
          case 62: 
            { return TRY;
            }
          case 189: break;
          case 63: 
            { return NEW;
            }
          case 190: break;
          case 64: 
            { return POW_EQUAL;
            }
          case 191: break;
          case 65: 
            { token = yytext(); return STRING;
            }
          case 192: break;
          case 66: 
            { return USE;
            }
          case 193: break;
          case 67: 
            { return VAR;
            }
          case 194: break;
          case 68: 
            { return IDENTICAL;
            }
          case 195: break;
          case 69: 
            { return SR_EQUAL;
            }
          case 196: break;
          case 70: 
            { return NOT_IDENTICAL;
            }
          case 197: break;
          case 71: 
            { return SL_EQUAL;
            }
          case 198: break;
          case 72: 
            { return ECHO;
            }
          case 199: break;
          case 73: 
            { return ELSE;
            }
          case 200: break;
          case 74: 
            { return EXIT;
            }
          case 201: break;
          case 75: 
            { return EVAL;
            }
          case 202: break;
          case 76: 
            { return CASE;
            }
          case 203: break;
          case 77: 
            { return LIST;
            }
          case 204: break;
          case 78: 
            { token = yytext(); return COMMENT;
            }
          case 205: break;
          case 79: 
            { return GOTO;
            }
          case 206: break;
          case 80: 
            { return FINAL;
            }
          case 207: break;
          case 81: 
            { return EMPTY;
            }
          case 208: break;
          case 82: 
            { return ENDIF;
            }
          case 209: break;
          case 83: 
            { return CATCH;
            }
          case 210: break;
          case 84: 
            { return CLASS;
            }
          case 211: break;
          case 85: 
            { return CLONE;
            }
          case 212: break;
          case 86: 
            { return CONST;
            }
          case 213: break;
          case 87: 
            { return ISSET;
            }
          case 214: break;
          case 88: 
            { return ARRAY;
            }
          case 215: break;
          case 89: 
            { return THROW;
            }
          case 216: break;
          case 90: 
            { return TRAIT;
            }
          case 217: break;
          case 91: 
            { return BREAK;
            }
          case 218: break;
          case 92: 
            { return PRINT;
            }
          case 219: break;
          case 93: 
            { return UNSET;
            }
          case 220: break;
          case 94: 
            { return WHILE;
            }
          case 221: break;
          case 95: 
            { return INI;
            }
          case 222: break;
          case 96: 
            { return ELSEIF;
            }
          case 223: break;
          case 97: 
            { return ENDFOR;
            }
          case 224: break;
          case 98: 
            { return RETURN;
            }
          case 225: break;
          case 99: 
            { return C_CONSTANT;
            }
          case 226: break;
          case 100: 
            { return PUBLIC;
            }
          case 227: break;
          case 101: 
            { return STATIC;
            }
          case 228: break;
          case 102: 
            { return SWITCH;
            }
          case 229: break;
          case 103: 
            { return GLOBAL;
            }
          case 230: break;
          case 104: 
            { return FOREACH;
            }
          case 231: break;
          case 105: 
            { return DEFAULT;
            }
          case 232: break;
          case 106: 
            { return DECLARE;
            }
          case 233: break;
          case 107: 
            { return EXTENDS;
            }
          case 234: break;
          case 108: 
            { return INCLUDE;
            }
          case 235: break;
          case 109: 
            { return REQUIRE;
            }
          case 236: break;
          case 110: 
            { return PRIVATE;
            }
          case 237: break;
          case 111: 
            { return FUNCTION;
            }
          case 238: break;
          case 112: 
            { return ENDWHILE;
            }
          case 239: break;
          case 113: 
            { return CALLABLE;
            }
          case 240: break;
          case 114: 
            { return CONTINUE;
            }
          case 241: break;
          case 115: 
            { return ABSTRACT;
            }
          case 242: break;
          case 116: 
            { return ENDSWITCH;
            }
          case 243: break;
          case 117: 
            { return INTERFACE;
            }
          case 244: break;
          case 118: 
            { return INSTEADOF;
            }
          case 245: break;
          case 119: 
            { return NAMESPACE;
            }
          case 246: break;
          case 120: 
            { return PROTECTED;
            }
          case 247: break;
          case 121: 
            { return ENDFOREACH;
            }
          case 248: break;
          case 122: 
            { return ENDDECLARE;
            }
          case 249: break;
          case 123: 
            { return IMPLEMENTS;
            }
          case 250: break;
          case 124: 
            { return INSTANCEOF;
            }
          case 251: break;
          case 125: 
            { return INCLUDE_ONCE;
            }
          case 252: break;
          case 126: 
            { return REQUIRE_ONCE;
            }
          case 253: break;
          case 127: 
            { return HALT_COMPILER;
            }
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
